webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/Contact.js":
/*!**************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/Contact.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ContactUs; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-bootstrap/Container */ \"./node_modules/react-bootstrap/esm/Container.js\");\n/* harmony import */ var react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-bootstrap/Row */ \"./node_modules/react-bootstrap/esm/Row.js\");\n/* harmony import */ var react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-bootstrap/Col */ \"./node_modules/react-bootstrap/esm/Col.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! emailjs-com */ \"./node_modules/emailjs-com/source/index.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(emailjs_com__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _ContactAlert__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ContactAlert */ \"./packages/alma-stolte-theme/src/components/ContactAlert.js\");\n/* harmony import */ var react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-bootstrap/Alert */ \"./node_modules/react-bootstrap/esm/Alert.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"1v7avpq-dynamicButtonStyle\",styles:\"background-color:rgba(111,147,83,0.5);border:1px solid #6F9353;color:#EDE4E5;&:hover{ackground-color:rgba(111,147,83,0.5);border:1px solid #6F9353;color:#EDE4E5;};label:dynamicButtonStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9Db250YWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFGbUIiLCJmaWxlIjoiL1VzZXJzL21vcml0emtsZW1tL0RvY3VtZW50cy9GaXJtYS9Qcm9qZWt0ZS9hbG1hIHN0b2x0ZS9jb2RlL2FsbWEtc3RvbHRlL3BhY2thZ2VzL2FsbWEtc3RvbHRlLXRoZW1lL3NyYy9jb21wb25lbnRzL0NvbnRhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29udGFpbmVyJ1xuaW1wb3J0IFJvdyBmcm9tICdyZWFjdC1ib290c3RyYXAvUm93J1xuaW1wb3J0IENvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29sJ1xuaW1wb3J0IGVtYWlsanMgZnJvbSAnZW1haWxqcy1jb20nO1xuaW1wb3J0IENvbnRhY3RBbGVydCBmcm9tICcuL0NvbnRhY3RBbGVydCdcbmltcG9ydCBBbGVydCBmcm9tICdyZWFjdC1ib290c3RyYXAvQWxlcnQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhY3RVcygpIHtcblxuICAgIC8vIHZhcmlhYmxlIHRvIHNhdmUgaWYgYWxlcnQgaXMgc2hvd24uIHRocmVlIG9wdGlvbnM6IGhpZGUsIHN1Y2Nlc3MsIGZhaWx1cmVcbiAgICBjb25zdCBbYWxlcnRTdGF0dXMsIHNldEFsZXJ0U3RhdHVzXSA9IHVzZVN0YXRlKCdoaWRlJyk7XG5cbiAgICAvLyB2YXJpYWJsZXMgdG8ga2VlcCBuYW1lIHVwZGF0ZWQgb25DaGFuZ2VcbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZSgnJylcbiAgICAvLyB2YXJpYWJsZXMgbWFuaXB1bGF0aW5nIGJvb3RzdHJhcCBmb3JtIGNvbnRyb2wgY2xhc3NlcyBcbiAgICBjb25zdCBbbmFtZUNvcnJlY3QsIHNldE5hbWVDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuICAgIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoJycpXG4gICAgY29uc3QgW2VtYWlsQ29ycmVjdCwgc2V0RW1haWxDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtzdWJqZWN0Q29ycmVjdCwgc2V0U3ViamVjdENvcnJlY3RdID0gdXNlU3RhdGUoJ2Zvcm0tY29udHJvbCcpXG5cbiAgICBjb25zdCBbY29udGVudCwgc2V0Q29udGVudF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbY29udGVudENvcnJlY3QsIHNldENvbnRlbnRDb3JyZWN0XSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gICAgY29uc3QgdmFsaWRhdGVOYW1lID0gKG5hbWVJbnB1dCkgPT4ge1xuXG4gICAgICAgIC8vIGtlZXAgaW5wdXQgZmllbGQgXCJzeW5jaHJvblwiIHdpdGggdXNlciBpbnB1dFxuICAgICAgICBzZXROYW1lKG5hbWVJbnB1dClcblxuICAgICAgICAvLyBkZWZpbmUgZW1haWwgcGF0dGVybiBcbiAgICAgICAgY29uc3QgcmVnRXhOYW1lID0gL15bYS16QS1aXFxzXSskLztcblxuICAgICAgICAvLyBjcmVhdGUgcmVnZXggb2JqZWN0IFxuICAgICAgICBjb25zdCByZWdFeE5hbWVPYmplY3QgPSBuZXcgUmVnRXhwKHJlZ0V4TmFtZSlcblxuICAgICAgICAvLyB0ZXN0IHJlZ2V4IGFnYWluc3QgdXNlciBpbnB1dCBzYXZlZCBpbiBcIm5hbWVcIlxuICAgICAgICBsZXQgcmVzdWx0TmFtZSA9IHJlZ0V4TmFtZU9iamVjdC50ZXN0KG5hbWUudG9Mb3dlckNhc2UoKSlcblxuICAgICAgICAvLyBmaXJzdCBjaGVja3MgaWYgc3RyaW5nIGlzIGVtcHR5IGJlY2F1c2Ugbm8gdmFsaWRhdGlvbiBuZWVkZWQgaWYgc28uIGlmIG5vdCBlbXB0eSwgY2hlY2tpbmcgcmVzdWx0cyBvZiByZWdleC5cbiAgICAgICAgc2V0TmFtZUNvcnJlY3QobmFtZUlucHV0ID09ICcnID8gJycgOiByZXN1bHROYW1lID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG5cbiAgICAgICAgLy8gbmVlZGVkIGZvciBmaW5hbCBzZW5kRW1haWwgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIHJlc3VsdE5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGVNYWlsID0gKG1haWxJbnB1dCkgPT4ge1xuICAgICAgICBzZXRFbWFpbChtYWlsSW5wdXQpXG5cbiAgICAgICAgY29uc3QgcmVnRXhNYWlsID0gL1xcUytAXFxTK1xcLlxcUysvO1xuICAgICAgICBjb25zdCByZWdFeE1haWxPYmplY3QgPSBuZXcgUmVnRXhwKHJlZ0V4TWFpbClcblxuICAgICAgICBsZXQgcmVzdWx0TWFpbCA9IHJlZ0V4TWFpbE9iamVjdC50ZXN0KGVtYWlsLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIHNldEVtYWlsQ29ycmVjdChtYWlsSW5wdXQgPT0gJycgPyAnJyA6IHJlc3VsdE1haWwgPyBcImZvcm0tY29udHJvbCBpcy12YWxpZFwiIDogXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdE1haWw7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGVTdWJqZWN0ID0gKHN1YmplY3RJbnB1dCkgPT4ge1xuICAgICAgICBzZXRTdWJqZWN0KHN1YmplY3RJbnB1dClcbiAgICAgICAgLy8gaWYgc3ViamVjdCBoYXMgbW9yZSB0aGVuIDEgb3IgbGVzcyBlcXVhbCB0byAxNjAgY2hhcmFjdGVyIGl0IGlzIGFjY2VwdGVkLlxuICAgICAgICBzZXRTdWJqZWN0Q29ycmVjdChzdWJqZWN0SW5wdXQubGVuZ3RoIDw9IDEgPyBcImZvcm0tY29udHJvbCBpcy1pbnZhbGlkXCIgOiBzdWJqZWN0SW5wdXQubGVuZ3RoIDw9IDE2MCA/IFwiZm9ybS1jb250cm9sIGlzLXZhbGlkXCIgOiBcImZvcm0tY29udHJvbCBpcy1pbnZhbGlkXCIpO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRlQ29udGVudCA9IChjb250ZW50SW5wdXQpID0+IHtcbiAgICAgICAgc2V0Q29udGVudChjb250ZW50SW5wdXQpXG4gICAgICAgIC8vIGFjY2VwdGluZyBpZiBtb3JlIHRoZW4gMyBjaGFyYWN0ZXJzIGFyZSBpbiBtZXNzYWdlXG4gICAgICAgIHNldENvbnRlbnRDb3JyZWN0KGNvbnRlbnRJbnB1dC5sZW5ndGggPj0gMyA/IHRydWUgOiBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZHluYW1pY0J1dHRvblN0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgKG5hbWVDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAgICAgJiYgZW1haWxDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAgICAgJiYgc3ViamVjdENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCdcbiAgICAgICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdClcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTExLDE0Nyw4MywxKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7IFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMSk7IGJvcmRlcjogbm9uZTsgY29sb3I6ICNFREU0RTVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBjc3NgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDAuNSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzZGOTM1MzsgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMC41KTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICApXG4gICAgfVxuXG4gICAgLy8gZW5hYmxlcyAvIGRpc2FibGVzIGJ1dHRvbiBhY2NvcmRpbmcgdG8gYWxsIDQgY29uZGl0aW9uc1xuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKG5hbWVDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAmJiBlbWFpbENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCdcbiAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFwiZGlzYWJsZWRcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZEVtYWlsKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGFsbCBmaWVsZHMgYXJlIGNvcnJlY3RcbiAgICAgICAgaWYgKG5hbWVDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAmJiBlbWFpbENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCdcbiAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdCkge1xuXG4gICAgICAgICAgICAvLyBjcmVkZW50aWFscyBkZXJpdmVkIGZyb20gZW1haWxqcy5jb21cbiAgICAgICAgICAgIGVtYWlsanMuc2VuZEZvcm0oJ3NlcnZpY2VfY212MmEwaScsICd0ZW1wbGF0ZV9pY21hbmhnJywgZS50YXJnZXQsICd1c2VyX3F5S1h0MURqOEhxMGRNMHNKMXE4cicpXG4gICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGV4dCA9PSBcIk9LXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBbGVydFN0YXR1cygnc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEFsZXJ0U3RhdHVzKCdmYWlsdXJlJylcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIGUudGFyZ2V0LnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGVydChcIklocmUgRWluZ2FiZW4gc2luZCBub2NoIG5pY2h0IGFsbGUga29ycmVrdCFcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRDb250YWluZXIgaWQ9XCJjb250YWN0LXNtb290aC1zY3JvbGxcIj5cbiAgICAgICAgICAgIDxGb3JtIGNsYXNzTmFtZT1cImNvbnRhY3QtZm9ybVwiIG9uU3VibWl0PXtzZW5kRW1haWx9PlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPiBcbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJfbmFtZVwiIHBsYWNlaG9sZGVyPVwiVm9yIC11bmQgTmFjaG5hbWVcIiB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9eyhlKSA9PiB7IHZhbGlkYXRlTmFtZShlLnRhcmdldC52YWx1ZSkgfX0gY2xhc3NOYW1lPXtuYW1lQ29ycmVjdH0gLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwidXNlcl9lbWFpbFwiIHBsYWNlaG9sZGVyPVwiRW1haWxcIiB2YWx1ZT17ZW1haWx9IG9uQ2hhbmdlPXsoZSkgPT4geyB2YWxpZGF0ZU1haWwoZS50YXJnZXQudmFsdWUpIH19IGNsYXNzTmFtZT17ZW1haWxDb3JyZWN0fSAvPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInN1YmplY3RcIiBwbGFjZWhvbGRlcj1cIkJldHJlZmZcIiB2YWx1ZT17c3ViamVjdH0gb25DaGFuZ2U9eyhlKSA9PiB7IHZhbGlkYXRlU3ViamVjdChlLnRhcmdldC52YWx1ZSkgfX0gY2xhc3NOYW1lPXtzdWJqZWN0Q29ycmVjdH0gLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQ29udHJvbE1lc3NhZ2UgYXM9XCJ0ZXh0YXJlYVwiIHJvd3M9ezh9IG5hbWU9XCJtZXNzYWdlXCIgcGxhY2Vob2xkZXI9XCJOYWNocmljaHQgYW4gQWxtYSBTdG9sdGUuLi5cIiB2YWx1ZT17Y29udGVudH0gb25DaGFuZ2U9eyhlKSA9PiB7IHZhbGlkYXRlQ29udGVudChlLnRhcmdldC52YWx1ZSkgfX0gLz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQnV0dG9uIGRpc2FibGVkPXt0b2dnbGVCdXR0b259IHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIlNlbmRcIlxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3M9e2R5bmFtaWNCdXR0b25TdHlsZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kZW48L1N0eWxlZEZvcm1CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgPC9Gb3JtPlxuXG4gICAgICAgICAgICB7LyoqIHJlbmRlcmluZyBhbGVydCBhY2NvcmRpbmcgdG8gXCJhbGVydFN0YXR1c1wiICovfVxuICAgICAgICAgICAge2FsZXJ0U3RhdHVzID09ICdoaWRlJyA/IG51bGwgOlxuICAgICAgICAgICAgICAgIGFsZXJ0U3RhdHVzID09ICdzdWNjZXNzJyA/XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRTdWNjZXNzQWxlcnQgdmFyaWFudD1cInN1Y2Nlc3NcIiBvbkNsaWNrPXsoKSA9PiB7IHNldEFsZXJ0U3RhdHVzKCdoaWRlJykgfX0gZGlzbWlzc2libGUgZmFkZSBzaG93PlxuICAgICAgICAgICAgICAgICAgICAgICAgSWhyZSBOYWNocmljaHQgd3VyZGUgdmVyc2NoaWNrdCFcbiAgICAgICAgICAgICAgICA8L1N0eWxlZFN1Y2Nlc3NBbGVydD5cbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkV2FybmluZ0FsZXJ0IHZhcmlhbnQ9XCJ3YXJuaW5nXCIgb25DbGljaz17KCkgPT4geyBzZXRBbGVydFN0YXR1cygnaGlkZScpIH19IGRpc21pc3NpYmxlIGNsYXNzTmFtZT1cImZhZGUgc2hvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgQWNodHVuZyEgSWhyZSBOYWNocmljaHQgd3VyZGUgbmljaHQgdmVyc2NoaWNrdC5cbiAgICAgICAgICAgICAgICA8L1N0eWxlZFdhcm5pbmdBbGVydD5cbiAgICAgICAgICAgIH1cblxuICAgICAgICA8L1N0eWxlZENvbnRhaW5lcj5cbiAgICApO1xufVxuXG5jb25zdCBTdHlsZWRDb250YWluZXIgPSBzdHlsZWQoQ29udGFpbmVyKWBcbiAgICBtYXgtd2lkdGg6IDQ1MHB4OyBcbiAgICBwYWRkaW5nOiAwcHg7IFxuYFxuXG4vLyBpbnB1dCBzdHlsaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbi8vIGJvb3RzdHJhcCA8aW5wdXQ+IGNvbXBvbmVudC4gd2l0aCB0eXBlID0gXCJ4XCIgc2F5aW5nIHdoYXQgdHlwZSBcbmNvbnN0IFN0eWxlZElucHV0ID0gc3R5bGVkKEZvcm0uQ29udHJvbClgXG4gICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICBmb250LXNpemU6IDE1LjJweDtcbiAgICBjb2xvcjogIzU5NTU1NTtcbiAgICBsZXR0ZXItc3BhY2luZzogMS4wcHg7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgYm9yZGVyOiBub25lOyBcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgZ3JleTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7IFxuICAgIHBhZGRpbmc6IDJweCAxMHB4OyBcbiAgICBtYXJnaW46IDIwcHggMHB4OyBcbiBcbiAgICAmOmZvY3VzIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIH1cblxuICAgICY6OmhvdmVyIHtcbiAgICAgICAgY3Vyc2VyOiBwb2ludGVyOyBcbiAgICB9XG5gXG5jb25zdCBTdHlsZWRGb3JtQ29udHJvbE1lc3NhZ2UgPSBzdHlsZWQoRm9ybS5Db250cm9sKWBcbiAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgIGZvbnQtc2l6ZTogMTUuMnB4O1xuICAgIGNvbG9yOiAjNTk1NTU1O1xuICAgIGxldHRlci1zcGFjaW5nOiAxLjBweDtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICBib3JkZXI6IDFweCBzb2xpZCBncmV5O1xuICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXG4gICAgaGVpZ2h0OiAyMDBweDsgXG4gICAgcGFkZGluZzogNHB4IDEwcHg7IFxuICAgIG1hcmdpbi10b3A6IDUwcHg7IFxuXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICB9XG5gXG5jb25zdCBidXR0b25Ib3ZlciA9IGtleWZyYW1lc2BcbiAgICBmcm9tIHt0cmFuc2Zvcm06IGJhY2tncm91bmQtY29sb3I6IHJlZDt9XG4gICAgdG8ge3RyYW5zZm9ybTogYmFja2dyb3VuZC1jb2xvcjogYmx1ZTt9XG5gXG5cbmNvbnN0IFN0eWxlZEZvcm1CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgZm9udC1zaXplOiAxNS4ycHg7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMHB4O1xuICAgIHdpZHRoOiAxMDAlOyBcbiAgICBoZWlnaHQ6IDM1cHg7XG4gICAgY29sb3I6IHdoaXRlOyBcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7IFxuXG4gICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1RjgwNDY7XG4gICAgfVxuYFxuY29uc3QgU3R5bGVkU3VjY2Vzc0FsZXJ0ID0gc3R5bGVkKEFsZXJ0KWBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgIGNvbG9yOiAjNkY5MzUzO1xuYFxuXG5jb25zdCBTdHlsZWRXYXJuaW5nQWxlcnQgPSBzdHlsZWQoQWxlcnQpYFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI0JGNEUzMDsgXG4gICAgY29sb3I6ICNCRjRFMzA7XG5gIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1yfzlh9-dynamicButtonStyle\",styles:\"background-color:rgba(111,147,83,1);border:none;color:#EDE4E5;&:hover{background-color:rgba(111,147,83,1);border:none;color:#EDE4E5;};label:dynamicButtonStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};function ContactUs(){// variable to save if alert is shown. three options: hide, success, failure\nconst[alertStatus,setAlertStatus]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('hide');// variables to keep name updated onChange\nconst[name,setName]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');// variables manipulating bootstrap form control classes \nconst[nameCorrect,setNameCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[email,setEmail]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[emailCorrect,setEmailCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[subject,setSubject]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[subjectCorrect,setSubjectCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[content,setContent]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[contentCorrect,setContentCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(false);const validateName=nameInput=>{// keep input field \"synchron\" with user input\nsetName(nameInput);// define email pattern \nconst regExName=/^[a-zA-Z\\s]+$/;// create regex object \nconst regExNameObject=new RegExp(regExName);// test regex against user input saved in \"name\"\nlet resultName=regExNameObject.test(name.toLowerCase());// first checks if string is empty because no validation needed if so. if not empty, checking results of regex.\nsetNameCorrect(nameInput==''?'':resultName?\"form-control is-valid\":\"form-control is-invalid\");// needed for final sendEmail function\nreturn resultName;};const validateMail=mailInput=>{setEmail(mailInput);const regExMail=/\\S+@\\S+\\.\\S+/;const regExMailObject=new RegExp(regExMail);let resultMail=regExMailObject.test(email.toLowerCase());setEmailCorrect(mailInput==''?'':resultMail?\"form-control is-valid\":\"form-control is-invalid\");return resultMail;};const validateSubject=subjectInput=>{setSubject(subjectInput);// if subject has more then 1 or less equal to 160 character it is accepted.\nsetSubjectCorrect(subjectInput.length<=1?\"form-control is-invalid\":subjectInput.length<=160?\"form-control is-valid\":\"form-control is-invalid\");};const validateContent=contentInput=>{setContent(contentInput);// accepting if more then 3 characters are in message\nsetContentCorrect(contentInput.length>=3?true:false);};const dynamicButtonStyle=()=>{return nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect?_ref2:_ref;};// enables / disables button according to all 4 conditions\nconst toggleButton=()=>{if(nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect){return\"\";}else{\"disabled\";}};function sendEmail(e){e.preventDefault();// check if all fields are correct\nif(nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect){// credentials derived from emailjs.com\nemailjs_com__WEBPACK_IMPORTED_MODULE_10___default.a.sendForm('service_cmv2a0i','template_icmanhg',e.target,'user_qyKXt1Dj8Hq0dM0sJ1q8r').then(result=>{console.log(result.text);if(result.text==\"OK\"){setAlertStatus('success');}},error=>{console.log(error.text);setAlertStatus('failure');});// e.target.reset();\n}else{alert(\"Ihre Eingaben sind noch nicht alle korrekt!\");}}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(StyledContainer,{id:\"contact-smooth-scroll\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"],{className:\"contact-form\",onSubmit:sendEmail,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"user_name\",placeholder:\"Vor -und Nachname\",value:name,onChange:e=>{validateName(e.target.value);},className:nameCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"email\",name:\"user_email\",placeholder:\"Email\",value:email,onChange:e=>{validateMail(e.target.value);},className:emailCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"subject\",placeholder:\"Betreff\",value:subject,onChange:e=>{validateSubject(e.target.value);},className:subjectCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormControlMessage,{as:\"textarea\",rows:8,name:\"message\",placeholder:\"Nachricht an Alma Stolte...\",value:content,onChange:e=>{validateContent(e.target.value);}})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormButton,{disabled:toggleButton,type:\"submit\",value:\"Send\",css:dynamicButtonStyle,children:\"senden\"})})]}),alertStatus=='hide'?null:alertStatus=='success'?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledSuccessAlert,{variant:\"success\",onClick:()=>{setAlertStatus('hide');},dismissible:true,fade:true,show:true,children:\"Ihre Nachricht wurde verschickt!\"}):Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledWarningAlert,{variant:\"warning\",onClick:()=>{setAlertStatus('hide');},dismissible:true,className:\"fade show\",children:\"Achtung! Ihre Nachricht wurde nicht verschickt.\"})]});}const StyledContainer=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{target:\"e1jwy1zu5\",label:\"StyledContainer\"})( false?undefined:{name:\"1wpx54c\",styles:\"max-width:450px;padding:0px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// input styling --------------------------------------\n// bootstrap <input> component. with type = \"x\" saying what type \nconst StyledInput=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu4\",label:\"StyledInput\"})( false?undefined:{name:\"1pgtf25\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:none;border-bottom:1px solid grey;border-radius:0px;padding:2px 10px;margin:20px 0px;&:focus{background-color:transparent;}&::hover{curser:pointer;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledFormControlMessage=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu3\",label:\"StyledFormControlMessage\"})( false?undefined:{name:\"hifqds\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:1px solid grey;border-radius:0px;height:200px;padding:4px 10px;margin-top:50px;&:focus{background-color:transparent;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const buttonHover=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"keyframes\"])(_t||(_t=_`\n    from {transform: background-color: red;}\n    to {transform: background-color: blue;}\n`));const StyledFormButton=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"button\",{target:\"e1jwy1zu2\",label:\"StyledFormButton\"})( false?undefined:{name:\"12h44pz\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;letter-spacing:1.0px;width:100%;height:35px;color:white;border-radius:0px;&:hover{background-color:#5F8046;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledSuccessAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu1\",label:\"StyledSuccessAlert\"})( false?undefined:{name:\"19jywi1\",styles:\"background-color:transparent!important;border:1px solid #6F9353;color:#6F9353\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledWarningAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu0\",label:\"StyledWarningAlert\"})( false?undefined:{name:\"zdnu7z\",styles:\"background-color:transparent!important;border:1px solid #BF4E30;color:#BF4E30\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/Contact.js\n");

/***/ })

})