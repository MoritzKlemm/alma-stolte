webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/NavbarCustom.js":
/*!*******************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/NavbarCustom.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var _assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/images/almaBackground.jpg */ \"./packages/alma-stolte-theme/src/assets/images/almaBackground.jpg\");\n/* harmony import */ var _NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NavbarCustomLink */ \"./packages/alma-stolte-theme/src/components/NavbarCustomLink.js\");\n/* harmony import */ var react_feather__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-feather */ \"./node_modules/react-feather/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t,_t2;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"gj67yd-NavbarCustom\",styles:\"display:none;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"ldabuv-NavbarCustom\",styles:\"color:#333232;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"1ezjzhp-NavbarCustom\",styles:\"color:#EDE4E5;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"ldabuv-NavbarCustom\",styles:\"color:#333232;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0o0RyIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcbiAgICBcbiAgICAvLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG4gICAgY29uc3QgYnJlYWtQb2ludFhMID0gMTIwMDtcbiAgICBjb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG4gICAgY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRTTSA9IDU3NjsgXG4gICAgY29uc3QgYnJlYWtQb2ludFhTID0gNDI1OyBcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG4gICAgY29uc3QgW3RvZ2dsZXJTaG93SGlkZSwgc2V0VG9nZ2xlclNob3dIaWRlXSA9IHVzZVN0YXRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgIGNvbnN0IFt0b2dnbGVBcmVhLCBzZXRUb2dnbGVBcmVhXSA9IHVzZVN0YXRlKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gZnVsbHkgbWFuaXVwYWx0ZSBib290c3RyYXAgY2xhc3NlcyBvbiBjbGljayB0byBrZWVwIHRoZWlyIGxvZ2ljXG4gICAgY29uc3QgdG9nZ2xlck9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmKHRvZ2dsZXJTaG93SGlkZSA9PSAnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgICAgICBzZXRUb2dnbGVBcmVhKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRvZ2dsZXJTaG93SGlkZSgnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJylcbiAgICAgICAgICAgIHNldFRvZ2dsZUFyZWEoJ2p1c3RpZnktY29udGVudC1lbmQgbmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlJylcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZyb20gdG9nZ2xlcjogXCIgKyB0b2dnbGVyU2hvd0hpZGUpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRvZ2dsZUFyZWFPbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBpZih0b2dnbGVBcmVhID09ICdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JyAmJiB0b2dnbGVyU2hvd0hpZGUgPT0gJ25hdmJhci10b2dnbGVyJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2UnKVxuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2Ugc2hvdycpO1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG5cbiAgICAgICAgICAgIDxOYXZiYXIgdmFyaWFudD1cImRhcmtcIiBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgey8qIGxvZ28gQWxtYSBTdG9sdGUgKi99XG4gICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL1wifSBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogIzMzMzIzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRMR31weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI2cHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9PkFMTUEgU1RPTFRFXG4gICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHsvKiBoYW1idXJnZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIHsvKiogPE1lbnUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgb25DbGljaz17b25DbGlja1RvZ2dsZUJHQ29sb3J9IC8+ICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuVG9nZ2xlIGFyaWEtY29udHJvbHM9XCJ0b2dnbGUtY29ubmVjdGlvblwiIG9uQ2xpY2s9e29uQ2xpY2tUb2dnbGVCR0NvbG9yfSBjc3M9e2RhdGEuaXNIb21lID8gXG4gICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgYm9yZGVyOiBub25lO2AgOiBcbiAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBib3JkZXI6IG5vbmU7YH0vPlxuXG4gICAgICAgICAgICAgICAgey8qIHRvZ2dsZSBtZW51IHdoZW4gdW5jb2xsYXBzZWQgKi99IFxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIGNvbGxhcHNlZCAqL30gXG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9e1wiL2thbGVuZGVyL1wifT50ZXN0PC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0gb25DbGljaz17dG9nZ2xlQXJlYU9uQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLQUxFTkRFUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9wcm9qZWt0ZS9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFS1RFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL3ZpdGEvXCJ9IGNzcz17ZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTU7YCA6IGNzc2Bjb2xvcjogIzMzMzIzMmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVRBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL21lZGlhL1wifSBjc3M9e2RhdGEuaXNIb21lID8gY3NzYGNvbG9yOiAjRURFNEU1O2AgOiBjc3NgY29sb3I6ICMzMzMyMzJgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVESUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIva29udGFrdC9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtPTlRBS1RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTIwcHggNTBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7IFxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"1ezjzhp-NavbarCustom\",styles:\"color:#EDE4E5;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref6= false?undefined:{name:\"ldabuv-NavbarCustom\",styles:\"color:#333232;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref7= false?undefined:{name:\"1ezjzhp-NavbarCustom\",styles:\"color:#EDE4E5;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref8= false?undefined:{name:\"ldabuv-NavbarCustom\",styles:\"color:#333232;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref9= false?undefined:{name:\"1ezjzhp-NavbarCustom\",styles:\"color:#EDE4E5;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref10= false?undefined:{name:\"ldabuv-NavbarCustom\",styles:\"color:#333232;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref11= false?undefined:{name:\"1ezjzhp-NavbarCustom\",styles:\"color:#EDE4E5;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBbUl3RiIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcbiAgICBcbiAgICAvLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG4gICAgY29uc3QgYnJlYWtQb2ludFhMID0gMTIwMDtcbiAgICBjb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG4gICAgY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRTTSA9IDU3NjsgXG4gICAgY29uc3QgYnJlYWtQb2ludFhTID0gNDI1OyBcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG4gICAgY29uc3QgW3RvZ2dsZXJTaG93SGlkZSwgc2V0VG9nZ2xlclNob3dIaWRlXSA9IHVzZVN0YXRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgIGNvbnN0IFt0b2dnbGVBcmVhLCBzZXRUb2dnbGVBcmVhXSA9IHVzZVN0YXRlKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gZnVsbHkgbWFuaXVwYWx0ZSBib290c3RyYXAgY2xhc3NlcyBvbiBjbGljayB0byBrZWVwIHRoZWlyIGxvZ2ljXG4gICAgY29uc3QgdG9nZ2xlck9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmKHRvZ2dsZXJTaG93SGlkZSA9PSAnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgICAgICBzZXRUb2dnbGVBcmVhKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRvZ2dsZXJTaG93SGlkZSgnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJylcbiAgICAgICAgICAgIHNldFRvZ2dsZUFyZWEoJ2p1c3RpZnktY29udGVudC1lbmQgbmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlJylcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZyb20gdG9nZ2xlcjogXCIgKyB0b2dnbGVyU2hvd0hpZGUpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRvZ2dsZUFyZWFPbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBpZih0b2dnbGVBcmVhID09ICdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JyAmJiB0b2dnbGVyU2hvd0hpZGUgPT0gJ25hdmJhci10b2dnbGVyJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2UnKVxuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2Ugc2hvdycpO1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG5cbiAgICAgICAgICAgIDxOYXZiYXIgdmFyaWFudD1cImRhcmtcIiBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgey8qIGxvZ28gQWxtYSBTdG9sdGUgKi99XG4gICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL1wifSBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogIzMzMzIzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRMR31weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI2cHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9PkFMTUEgU1RPTFRFXG4gICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHsvKiBoYW1idXJnZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIHsvKiogPE1lbnUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgb25DbGljaz17b25DbGlja1RvZ2dsZUJHQ29sb3J9IC8+ICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuVG9nZ2xlIGFyaWEtY29udHJvbHM9XCJ0b2dnbGUtY29ubmVjdGlvblwiIG9uQ2xpY2s9e29uQ2xpY2tUb2dnbGVCR0NvbG9yfSBjc3M9e2RhdGEuaXNIb21lID8gXG4gICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgYm9yZGVyOiBub25lO2AgOiBcbiAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBib3JkZXI6IG5vbmU7YH0vPlxuXG4gICAgICAgICAgICAgICAgey8qIHRvZ2dsZSBtZW51IHdoZW4gdW5jb2xsYXBzZWQgKi99IFxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIGNvbGxhcHNlZCAqL30gXG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9e1wiL2thbGVuZGVyL1wifT50ZXN0PC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0gb25DbGljaz17dG9nZ2xlQXJlYU9uQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLQUxFTkRFUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9wcm9qZWt0ZS9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFS1RFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL3ZpdGEvXCJ9IGNzcz17ZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTU7YCA6IGNzc2Bjb2xvcjogIzMzMzIzMmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVRBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL21lZGlhL1wifSBjc3M9e2RhdGEuaXNIb21lID8gY3NzYGNvbG9yOiAjRURFNEU1O2AgOiBjc3NgY29sb3I6ICMzMzMyMzJgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVESUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIva29udGFrdC9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtPTlRBS1RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTIwcHggNTBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7IFxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref12= false?undefined:{name:\"qyqa6n-NavbarCustom\",styles:\"background-color:transparent;border:none;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref13= false?undefined:{name:\"qyqa6n-NavbarCustom\",styles:\"background-color:transparent;border:none;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref14= false?undefined:{name:\"3t3dk0-NavbarCustom\",styles:\"margin-bottom:80px;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const NavbarCustom=({state})=>{const data=state.source.get(state.router.link);// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1200;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;const breakPointXS=425;// variable which changes color of toggler menu on click\nconst[toggleBGColor,setToggleBGColor]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('rgba(0,0,0,0.5)');const[togglerShowHide,setTogglerShowHide]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('navbar-toggler collapsed');const[toggleArea,setToggleArea]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('justify-content-end navbar-collapse collapse');const onClickToggleBGColor=()=>{toggleBGColor=='rgba(0,0,0,0.5)'?setToggleBGColor('rgba(0,0,0,0.9)'):setToggleBGColor('rgba(0,0,0,0.5)');};// need to fully maniupalte bootstrap classes on click to keep their logic\nconst togglerOnClick=()=>{if(togglerShowHide=='navbar-toggler collapsed'){setTogglerShowHide('navbar-toggler');setToggleArea('justify-content-end navbar-collapse collapse show');}else{setTogglerShowHide('navbar-toggler collapsed');setToggleArea('justify-content-end navbar-collapse collapse');}// console.log(\"from toggler: \" + togglerShowHide)\n};const toggleAreaOnClick=()=>{if(toggleArea=='justify-content-end navbar-collapse collapse show'&&togglerShowHide=='navbar-toggler'){setToggleArea('justify-content-end navbar-collapse collapse');setTogglerShowHide('navbar-toggler collapsed');}else{setToggleArea('justify-content-end navbar-collapse collapse show');setTogglerShowHide('navbar-toggler');}};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"background-image:url(\",_assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\");background-size:cover;background-attachment:fixed;background-position:top;height:100vh;\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref14,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"],{variant:\"dark\",expand:\"xl\",fixed:\"top\",css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:\",toggleBGColor,\";@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:rgba(235,221,209,0.8);@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0VtQiIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcbiAgICBcbiAgICAvLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG4gICAgY29uc3QgYnJlYWtQb2ludFhMID0gMTIwMDtcbiAgICBjb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG4gICAgY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRTTSA9IDU3NjsgXG4gICAgY29uc3QgYnJlYWtQb2ludFhTID0gNDI1OyBcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG4gICAgY29uc3QgW3RvZ2dsZXJTaG93SGlkZSwgc2V0VG9nZ2xlclNob3dIaWRlXSA9IHVzZVN0YXRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgIGNvbnN0IFt0b2dnbGVBcmVhLCBzZXRUb2dnbGVBcmVhXSA9IHVzZVN0YXRlKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gZnVsbHkgbWFuaXVwYWx0ZSBib290c3RyYXAgY2xhc3NlcyBvbiBjbGljayB0byBrZWVwIHRoZWlyIGxvZ2ljXG4gICAgY29uc3QgdG9nZ2xlck9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmKHRvZ2dsZXJTaG93SGlkZSA9PSAnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgICAgICBzZXRUb2dnbGVBcmVhKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRvZ2dsZXJTaG93SGlkZSgnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJylcbiAgICAgICAgICAgIHNldFRvZ2dsZUFyZWEoJ2p1c3RpZnktY29udGVudC1lbmQgbmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlJylcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZyb20gdG9nZ2xlcjogXCIgKyB0b2dnbGVyU2hvd0hpZGUpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRvZ2dsZUFyZWFPbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBpZih0b2dnbGVBcmVhID09ICdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JyAmJiB0b2dnbGVyU2hvd0hpZGUgPT0gJ25hdmJhci10b2dnbGVyJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2UnKVxuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2Ugc2hvdycpO1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG5cbiAgICAgICAgICAgIDxOYXZiYXIgdmFyaWFudD1cImRhcmtcIiBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgey8qIGxvZ28gQWxtYSBTdG9sdGUgKi99XG4gICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL1wifSBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogIzMzMzIzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRMR31weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI2cHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9PkFMTUEgU1RPTFRFXG4gICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHsvKiBoYW1idXJnZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIHsvKiogPE1lbnUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgb25DbGljaz17b25DbGlja1RvZ2dsZUJHQ29sb3J9IC8+ICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuVG9nZ2xlIGFyaWEtY29udHJvbHM9XCJ0b2dnbGUtY29ubmVjdGlvblwiIG9uQ2xpY2s9e29uQ2xpY2tUb2dnbGVCR0NvbG9yfSBjc3M9e2RhdGEuaXNIb21lID8gXG4gICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgYm9yZGVyOiBub25lO2AgOiBcbiAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBib3JkZXI6IG5vbmU7YH0vPlxuXG4gICAgICAgICAgICAgICAgey8qIHRvZ2dsZSBtZW51IHdoZW4gdW5jb2xsYXBzZWQgKi99IFxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIGNvbGxhcHNlZCAqL30gXG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9e1wiL2thbGVuZGVyL1wifT50ZXN0PC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0gb25DbGljaz17dG9nZ2xlQXJlYU9uQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLQUxFTkRFUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9wcm9qZWt0ZS9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFS1RFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL3ZpdGEvXCJ9IGNzcz17ZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTU7YCA6IGNzc2Bjb2xvcjogIzMzMzIzMmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVRBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL21lZGlhL1wifSBjc3M9e2RhdGEuaXNIb21lID8gY3NzYGNvbG9yOiAjRURFNEU1O2AgOiBjc3NgY29sb3I6ICMzMzMyMzJgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVESUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIva29udGFrdC9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtPTlRBS1RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTIwcHggNTBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7IFxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\"),children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/\",css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#EDE4E5;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;}@media (max-width: \",breakPointSM,\"px){font-size:20px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#333232;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;}@media (max-width: \",breakPointSM,\"px){font-size:20px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),children:\"ALMA STOLTE\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Toggle,{\"aria-controls\":\"toggle-connection\",onClick:onClickToggleBGColor,css:data.isHome?_ref13:_ref12}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Collapse,{id:\"toggle-connection\",className:\"justify-content-end\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(StyledToggleArea,{className:\"mr-auto\",className:\"justify-content-end\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(StyledMargin,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"].Link,{href:\"/kalender/\",children:\"test\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/kalender/\",css:data.isHome?_ref11:_ref10,onClick:toggleAreaOnClick,children:\"KALENDER\"})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledMargin,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/projekte/\",css:data.isHome?_ref9:_ref8,children:\"PROJEKTE\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledMargin,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/vita/\",css:data.isHome?_ref7:_ref6,children:\"VITA\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledMargin,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/media/\",css:data.isHome?_ref5:_ref4,children:\"MEDIA\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledMargin,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/kontakt/\",css:data.isHome?_ref3:_ref2,children:\"KONTAKT\"})})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:120px 50px;@media (max-width: \",breakPointMD,\"px){padding:80px 50px;}@media (max-width: \",breakPointSM,\"px){padding:80px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Historisches Violoncello\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Modernes Violoncello\"})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(NavbarCustom));// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;// -----------------------------------------\nconst appear=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t||(_t=_`\nfrom {\n    color: rgba(219, 204, 205, 0.0);\n  }\n  to {\n    color: rgba(219, 204, 205, 0.9);\n  }\n`));// -----------------------------------------\nconst moveup=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t2||(_t2=_`\nfrom {\n    transform: translateY(50px);\n  } \n  to {\n    transform: translateY(0px);\n  }\n`));const StyledToggleArea=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"],{target:\"en8g08n2\",label:\"StyledToggleArea\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeU5vQyIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcbiAgICBcbiAgICAvLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG4gICAgY29uc3QgYnJlYWtQb2ludFhMID0gMTIwMDtcbiAgICBjb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG4gICAgY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRTTSA9IDU3NjsgXG4gICAgY29uc3QgYnJlYWtQb2ludFhTID0gNDI1OyBcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG4gICAgY29uc3QgW3RvZ2dsZXJTaG93SGlkZSwgc2V0VG9nZ2xlclNob3dIaWRlXSA9IHVzZVN0YXRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgIGNvbnN0IFt0b2dnbGVBcmVhLCBzZXRUb2dnbGVBcmVhXSA9IHVzZVN0YXRlKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gZnVsbHkgbWFuaXVwYWx0ZSBib290c3RyYXAgY2xhc3NlcyBvbiBjbGljayB0byBrZWVwIHRoZWlyIGxvZ2ljXG4gICAgY29uc3QgdG9nZ2xlck9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGlmKHRvZ2dsZXJTaG93SGlkZSA9PSAnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgICAgICBzZXRUb2dnbGVBcmVhKCdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRvZ2dsZXJTaG93SGlkZSgnbmF2YmFyLXRvZ2dsZXIgY29sbGFwc2VkJylcbiAgICAgICAgICAgIHNldFRvZ2dsZUFyZWEoJ2p1c3RpZnktY29udGVudC1lbmQgbmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlJylcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImZyb20gdG9nZ2xlcjogXCIgKyB0b2dnbGVyU2hvd0hpZGUpXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRvZ2dsZUFyZWFPbkNsaWNrID0gKCkgPT4ge1xuICAgICAgICBpZih0b2dnbGVBcmVhID09ICdqdXN0aWZ5LWNvbnRlbnQtZW5kIG5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSBzaG93JyAmJiB0b2dnbGVyU2hvd0hpZGUgPT0gJ25hdmJhci10b2dnbGVyJykge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2UnKVxuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlciBjb2xsYXBzZWQnKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VG9nZ2xlQXJlYSgnanVzdGlmeS1jb250ZW50LWVuZCBuYXZiYXItY29sbGFwc2UgY29sbGFwc2Ugc2hvdycpO1xuICAgICAgICAgICAgc2V0VG9nZ2xlclNob3dIaWRlKCduYXZiYXItdG9nZ2xlcicpXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG5cbiAgICAgICAgICAgIDxOYXZiYXIgdmFyaWFudD1cImRhcmtcIiBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgey8qIGxvZ28gQWxtYSBTdG9sdGUgKi99XG4gICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL1wifSBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2Bjb2xvcjogIzMzMzIzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRMR31weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI2cHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9PkFMTUEgU1RPTFRFXG4gICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgIHsvKiBoYW1idXJnZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIHsvKiogPE1lbnUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgb25DbGljaz17b25DbGlja1RvZ2dsZUJHQ29sb3J9IC8+ICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuVG9nZ2xlIGFyaWEtY29udHJvbHM9XCJ0b2dnbGUtY29ubmVjdGlvblwiIG9uQ2xpY2s9e29uQ2xpY2tUb2dnbGVCR0NvbG9yfSBjc3M9e2RhdGEuaXNIb21lID8gXG4gICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgYm9yZGVyOiBub25lO2AgOiBcbiAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBib3JkZXI6IG5vbmU7YH0vPlxuXG4gICAgICAgICAgICAgICAgey8qIHRvZ2dsZSBtZW51IHdoZW4gdW5jb2xsYXBzZWQgKi99IFxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIGNvbGxhcHNlZCAqL30gXG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdi5MaW5rIGhyZWY9e1wiL2thbGVuZGVyL1wifT50ZXN0PC9OYXYuTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0gb25DbGljaz17dG9nZ2xlQXJlYU9uQ2xpY2t9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBLQUxFTkRFUlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTmF2YmFyQ3VzdG9tTGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2YmFyQ3VzdG9tTGluayBsaW5rPXtcIi9wcm9qZWt0ZS9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBST0pFS1RFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL3ZpdGEvXCJ9IGNzcz17ZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTU7YCA6IGNzc2Bjb2xvcjogIzMzMzIzMmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWSVRBXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTWFyZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZiYXJDdXN0b21MaW5rIGxpbms9e1wiL21lZGlhL1wifSBjc3M9e2RhdGEuaXNIb21lID8gY3NzYGNvbG9yOiAjRURFNEU1O2AgOiBjc3NgY29sb3I6ICMzMzMyMzJgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVESUFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWRNYXJnaW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIva29udGFrdC9cIn0gY3NzPXtkYXRhLmlzSG9tZSA/IGNzc2Bjb2xvcjogI0VERTRFNTtgIDogY3NzYGNvbG9yOiAjMzMzMjMyYH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtPTlRBS1RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L05hdmJhckN1c3RvbUxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1N0eWxlZE1hcmdpbj5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTIwcHggNTBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7IFxuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\");const StyledMargin=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\",{target:\"en8g08n1\",label:\"StyledMargin\"})(\"margin:0px 6%;@media (max-width: \",breakPointXL,\"px){margin:10px 0px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledSubHeading=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"h4\",{target:\"en8g08n0\",label:\"StyledSubHeading\"})(\"font-family:LibreBaskerville-Italic;font-size:20px;color:rgba(219, 204, 205, 0.9);letter-spacing:3.53px;line-height:30px;animation:\",appear,\" 1.8s ease-in-out;@media (max-width: \",breakPointMD,\"px){font-size:18px;line-height:25px;}@media (max-width: \",breakPointMD,\"px){font-size:16px;line-height:20px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/NavbarCustom.js\n");

/***/ })

})