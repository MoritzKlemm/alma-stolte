webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/NavbarCustom.js":
/*!*******************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/NavbarCustom.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var _assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/images/almaBackground.jpg */ \"./packages/alma-stolte-theme/src/assets/images/almaBackground.jpg\");\n/* harmony import */ var _NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NavbarCustomLink */ \"./packages/alma-stolte-theme/src/components/NavbarCustomLink.js\");\n/* harmony import */ var react_feather__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-feather */ \"./node_modules/react-feather/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t,_t2;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"qa76mu-dynamicSubheadingStyle\",styles:\"display:none;label:dynamicSubheadingStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"qpxod8-dynamicLinkStyle\",styles:\"color:#333232!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"ru1cpx-dynamicLinkStyle\",styles:\"color:#EDE4E5!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const NavbarCustom=({state})=>{// used to determine if the navbar needs to be styled light / dark\nconst data=state.source.get(state.router.link);// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=991;const breakPointMD=767;const breakPointSM=575;const breakPointXS=424;// variable which changes color of toggler menu on click\nconst[toggleBGColor,setToggleBGColor]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('rgba(0,0,0,0.7)');// toggles background color when data.isHome = true\nconst onClickToggleBGColor=()=>{toggleBGColor=='rgba(0,0,0,0.7)'?setToggleBGColor('rgba(0,0,0,1)'):setToggleBGColor('rgba(0,0,0,0.7)');};// {console.log(data.link)}\nconst dynamicLinkStyle=()=>{return data.isHome?_ref3:_ref2;};const dynamicTogglerStyle=()=>{return/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"border:none;background-color:none;padding:2px;display:flex;@media (max-width: \",breakPointSM,\"px){font-size:18px;padding:0px 0px 2px 0px;}\"+( false?undefined:\";label:dynamicTogglerStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicNavbarStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:\",toggleBGColor,\";display:flex;align-items:center;@media (max-width: \",breakPointSM,\"px){padding:10px 15px;}@media (max-width: \",breakPointXS,\"px){padding:5px 15px;}\"+( false?undefined:\";label:dynamicNavbarStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:rgba(235,221,209,1.0);@media (max-width: \",breakPointXL,\"px){padding:20px 40px;}@media (max-width: \",breakPointSM,\"px){padding:10px 15px;}@media (max-width: \",breakPointXS,\"px){padding:5px 15px;}\"+( false?undefined:\";label:dynamicNavbarStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicImageStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"background-image:linear-gradient(to bottom, transparent 80%, rgba(235,221,209,100)),url(\",_assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\");background-size:cover;background-position:top;height:100vh;width:auto;max-width:100%;\"+( false?undefined:\";label:dynamicImageStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"margin-bottom:85px;@media (max-width: \",breakPointXL,\"px){margin-bottom:95px;}@media (max-width: \",breakPointLG,\"px){margin-bottom:89px;}@media (max-width: \",breakPointSM,\"px){margin-bottom:53px;}@media (max-width: \",breakPointXS,\"px){margin-bottom:41px;}\"+( false?undefined:\";label:dynamicImageStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicLogoStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#EDE4E5;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;letter-spacing:9.86px;}@media (max-width: \",breakPointSM,\"px){font-size:22px;letter-spacing:8.86px;}@media (max-width: \",breakPointXS,\"px){font-size:21px;letter-spacing:5.86px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#333232;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;letter-spacing:9.86px;}@media (max-width: \",breakPointSM,\"px){font-size:22px;letter-spacing:8.86px;padding:0px;}@media (max-width: \",breakPointXS,\"px){font-size:21px;letter-spacing:5.86px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicSubheadingStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:120px 50px;@media (max-width: \",breakPointMD,\"px){padding:100px 50px;}@media (max-width: \",breakPointSM,\"px){padding:80px 15px;}\"+( false?undefined:\";label:dynamicSubheadingStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref;};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:dynamicImageStyle,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"],{variant:data.isHome?\"dark\":\"light\",expand:\"xl\",fixed:\"top\",css:dynamicNavbarStyle,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledLogoLink,{href:\"/\",css:dynamicLogoStyle,children:\"ALMA STOLTE\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Toggle,{\"aria-controls\":\"toggle-connection\",css:dynamicTogglerStyle,onClick:onClickToggleBGColor}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Collapse,{id:\"toggle-connection\",className:\"justify-content-end\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(StyledToggleArea,{className:\"mr-auto\",className:\"justify-content-end\",css:/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"@media (max-width: \",breakPointXL,\"px){margin-top:20px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"),children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kalender/\",css:dynamicLinkStyle,children:\"KALENDER\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/vita/\",css:dynamicLinkStyle,children:\"VITA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/media/\",css:dynamicLinkStyle,children:\"MEDIA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kontakt/\",css:dynamicLinkStyle,children:\"KONTAKT\"})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:dynamicSubheadingStyle,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Historisches Violoncello\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Modernes Violoncello\"})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(NavbarCustom));// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;// -----------------------------------------\nconst appear=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t||(_t=_`\nfrom {\n    color: rgba(219, 204, 205, 0.0);\n  }\n  to {\n    color: rgba(219, 204, 205, 0.9);\n  }\n`));// -----------------------------------------\nconst moveup=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t2||(_t2=_`\nfrom {\n    transform: translateY(50px);\n  } \n  to {\n    transform: translateY(0px);\n  }\n`));const StyledToggleArea=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"],{target:\"en8g08n4\",label:\"StyledToggleArea\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const StyledMargin=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\",{target:\"en8g08n3\",label:\"StyledMargin\"})(\"margin:0px 6%;@media (max-width: \",breakPointXL,\"px){margin:10px 0px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMFErQiIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYsIE5hdmJhckJyYW5kIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcbmltcG9ydCBhbG1hQmFja2dyb3VuZCBmcm9tICcuLi9hc3NldHMvaW1hZ2VzL2FsbWFCYWNrZ3JvdW5kLmpwZydcbmltcG9ydCBOYXZiYXJDdXN0b21MaW5rIGZyb20gXCIuL05hdmJhckN1c3RvbUxpbmtcIjtcbmltcG9ydCB7IFNoYXJlLCBEb3dubG9hZCwgTWVudSB9IGZyb20gJ3JlYWN0LWZlYXRoZXInO1xuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBuYXZiYXIgbmVlZHMgdG8gYmUgc3R5bGVkIGxpZ2h0IC8gZGFya1xuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcblxuICAgIC8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbiAgICBjb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRMRyA9IDk5MTtcbiAgICBjb25zdCBicmVha1BvaW50TUQgPSA3Njc7XG4gICAgY29uc3QgYnJlYWtQb2ludFNNID0gNTc1O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRYUyA9IDQyNDtcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC43KScpXG5cbiAgICAvLyB0b2dnbGVzIGJhY2tncm91bmQgY29sb3Igd2hlbiBkYXRhLmlzSG9tZSA9IHRydWVcbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC43KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDEpJykgOiBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuNyknKSlcbiAgICB9XG5cbiAgICAvLyB7Y29uc29sZS5sb2coZGF0YS5saW5rKX1cbiAgICBjb25zdCBkeW5hbWljTGlua1N0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZGF0YS5pc0hvbWUgPyBcbiAgICAgICAgICAgICAgICBjc3NgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtgIFxuICAgICAgICAgICAgICAgIDogXG4gICAgICAgICAgICAgICAgY3NzYGNvbG9yOiAjMzMzMjMyICFpbXBvcnRhbnQ7YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljVG9nZ2xlclN0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY3NzYGJvcmRlcjogbm9uZTsgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnB4OyBcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDE4cHg7IFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwcHggMHB4IDJweCAwcHg7IFxuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljTmF2YmFyU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsgXG5cbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50WFN9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBjc3NgcGFkZGluZzogMTVweCA1MHB4O1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDIzNSwyMjEsMjA5LDEuMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAyMHB4IDQwcHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTBweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50WFN9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZHluYW1pY0ltYWdlU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybihcbiAgICAgICAgICAgIGRhdGEuaXNIb21lID9cbiAgICAgICAgICAgIGNzc2AgICAgLy9iYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHthbG1hQmFja2dyb3VuZH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2lkdGg6IGF1dG87XG4gICAgICAgICAgICAgICAgICAgIC8vIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIGZyb20gdG9wIHRvIGJvdHRvbSwgbWFrZXMgZmlyc3QgNzUlIHRyYW5zcGFyZW50IGFuZCB0aGVuIFwiZ3JhZGlhdGluZ1wiIGludG8gcmdiLCB3aXRoIGJnIGFsbWFcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgdHJhbnNwYXJlbnQgODAlLCByZ2JhKDIzNSwyMjEsMjA5LDEwMCkpLCB1cmwoJHthbG1hQmFja2dyb3VuZH0pO1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6Y292ZXI7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgICAgICBcblxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgY3NzYCAgICAvLyB3aGVuIG1lbnUgY29sbGFwc2VkLCBwdXNoZXMgY29udGVudCBhY2NvcmRpbmcgdG8gbmF2YmFyIGhlaWdodCBkb3duIHdoaWNoIGNvbWVzIGZyb20gZGVmYXVsdCBib290c3RyYXAgYmVoYXZpb3IuXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDg1cHg7IFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA5NXB4OyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4OXB4OyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1M3B4OyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhTfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA0MXB4OyBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBgXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljTG9nb1N0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEuaXNIb21lID9cbiAgICAgICAgICAgIGNzc2Bjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMzBweDtcbiAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMTAuODZweDtcbiAgICAgICAgICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgICAgICAgICAgICAgIG1hcmdpbjogMHB4O1xuXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiA5Ljg2cHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDsgXG4gICAgICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiA4Ljg2cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYU31weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIxcHg7IFxuICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogNS44NnB4O1xuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgY29sb3I6ICMzMzMyMzI7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDEwLjg2cHg7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDkuODZweDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMnB4OyBcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDguODZweDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50WFN9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMXB4OyBcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDUuODZweDtcbiAgICAgICAgICAgICAgICB9YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljU3ViaGVhZGluZ1N0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZGF0YS5pc0hvbWUgP1xuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMjBweCA1MHB4O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRNRH1weCkge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxMDBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiAoXG5cbiAgICAgICAgPGRpdiBjc3M9e2R5bmFtaWNJbWFnZVN0eWxlfT5cblxuICAgICAgICAgICAgey8qIGNoYW5nZXMgaGFtYnVyZ2VyIGNvbG9yIGFjY29yZGluZyB0byBob21lIC8gbm90IGhvbWUgd2l0aCBib290c3RyYXAgZGVmYXVsdCBcImRhcmtcIiwgXCJsaWdodFwiICovfVxuICAgICAgICAgICAgPE5hdmJhciB2YXJpYW50PXtkYXRhLmlzSG9tZSA/IFwiZGFya1wiIDogXCJsaWdodFwifSBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkeW5hbWljTmF2YmFyU3R5bGV9PlxuXG4gICAgICAgICAgICAgICAgPFN0eWxlZExvZ29MaW5rIGhyZWY9e1wiL1wifSBjc3M9e2R5bmFtaWNMb2dvU3R5bGV9PkFMTUEgU1RPTFRFPC9TdHlsZWRMb2dvTGluaz5cblxuICAgICAgICAgICAgICAgIHsvKiBoYW1idXJnZXIgYnV0dG9uICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuVG9nZ2xlIGFyaWEtY29udHJvbHM9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNzcz17ZHluYW1pY1RvZ2dsZXJTdHlsZX0gb25DbGljaz17b25DbGlja1RvZ2dsZUJHQ29sb3J9IC8+XG5cbiAgICAgICAgICAgICAgICB7LyogdG9nZ2xlIG1lbnUgd2hlbiB1bmNvbGxhcHNlZCAqL31cbiAgICAgICAgICAgICAgICA8TmF2YmFyLkNvbGxhcHNlIGlkPVwidG9nZ2xlLWNvbm5lY3Rpb25cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgey8qIHRvZ2dsZSBtZW51IHdoZW4gY29sbGFwc2VkICovfVxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkVG9nZ2xlQXJlYSBjbGFzc05hbWU9XCJtci1hdXRvXCIgY2xhc3NOYW1lPVwianVzdGlmeS1jb250ZW50LWVuZFwiIGNzcz17Y3NzYEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge21hcmdpbi10b3A6IDIwcHg7fWB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIva2FsZW5kZXIvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+S0FMRU5ERVI8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi92aXRhL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PlZJVEE8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9tZWRpYS9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5NRURJQTwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL2tvbnRha3QvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+S09OVEFLVDwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2R5bmFtaWNTdWJoZWFkaW5nU3R5bGV9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgYXBwZWFyID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC4wKTtcbiAgfVxuICB0byB7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgfVxuYDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgbW92ZXVwID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwcHgpO1xuICB9IFxuICB0byB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCk7XG4gIH1cbmA7XG5cbmNvbnN0IFN0eWxlZFRvZ2dsZUFyZWEgPSBzdHlsZWQoTmF2KWBcbmBcbmNvbnN0IFN0eWxlZE1hcmdpbiA9IHN0eWxlZC5kaXZgXG4gICAgbWFyZ2luOiAwcHggNiU7XG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHg7IFxuICAgIH1cbmA7XG5cbmNvbnN0IFN0eWxlZExvZ29MaW5rID0gc3R5bGVkKE5hdmJhckJyYW5kKWBcblxuYFxuXG5jb25zdCBTdHlsZWROYXZMaW5rID0gc3R5bGVkKE5hdi5MaW5rKWBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41NnB4O1xuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMTIlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMHB4OyBcblxuICAgIC8vIHN0eWxpbmcgbGluayB0ZXh0IG9uIGhvdmVyXG4gICAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgY29sb3I6IHJnYigxNzUsMTc1LDE3NSkgIWltcG9ydGFudDtcbiAgICB9IFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xuICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDglICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHggIWltcG9ydGFudDsgXG4gICAgfVxuYFxuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\"));const StyledLogoLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"NavbarBrand\"],{target:\"en8g08n2\",label:\"StyledLogoLink\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const StyledNavLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"].Link,{target:\"en8g08n1\",label:\"StyledNavLink\"})(\"font-size:16px;color:#EDE4E5!important;letter-spacing:3.56px;margin:0px 0px 0px 12%!important;padding:0px;&:hover{text-decoration:none;cursor:pointer;color:rgb(175,175,175)!important;}@media (max-width: 1500px){margin:0px 0px 0px 8%!important;}@media (max-width: \",breakPointXL,\"px){margin:10px 0px!important;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledSubHeading=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"h4\",{target:\"en8g08n0\",label:\"StyledSubHeading\"})(\"font-family:LibreBaskerville-Italic;font-size:20px;color:rgba(219, 204, 205, 0.9);letter-spacing:3.53px;line-height:30px;animation:\",appear,\" 1.8s ease-in-out;@media (max-width: \",breakPointMD,\"px){font-size:18px;line-height:25px;}@media (max-width: \",breakPointMD,\"px){font-size:16px;line-height:20px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/NavbarCustom.js\n");

/***/ })

})