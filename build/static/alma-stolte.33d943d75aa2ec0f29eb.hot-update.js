webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/NavbarCustom.js":
/*!*******************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/NavbarCustom.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var _assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/images/almaBackground.jpg */ \"./packages/alma-stolte-theme/src/assets/images/almaBackground.jpg\");\n/* harmony import */ var _NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NavbarCustomLink */ \"./packages/alma-stolte-theme/src/components/NavbarCustomLink.js\");\n/* harmony import */ var react_feather__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-feather */ \"./node_modules/react-feather/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t,_t2;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"gj67yd-NavbarCustom\",styles:\"display:none;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"6lor9s-NavbarCustom\",styles:\"margin-top:15px;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"hjgrvj-dynamicImageStyle\",styles:\"margin-bottom:80px;label:dynamicImageStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"qpxod8-dynamicLinkStyle\",styles:\"color:#333232!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref5= false?undefined:{name:\"ru1cpx-dynamicLinkStyle\",styles:\"color:#EDE4E5!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkJpQyIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuY29uc3QgTmF2YmFyQ3VzdG9tID0gKHsgc3RhdGUgfSkgPT4ge1xuXG4gICAgLy8gdXNlZCB0byBkZXRlcm1pbmUgaWYgdGhlIG5hdmJhciBuZWVkcyB0byBiZSBzdHlsZWQgbGlnaHQgLyBkYXJrXG4gICAgY29uc3QgZGF0YSA9IHN0YXRlLnNvdXJjZS5nZXQoc3RhdGUucm91dGVyLmxpbmspO1xuXG4gICAgLy8gbGlrZSBib290c3RyYXAgYnJlYWtwb2ludHMgbWQsIGxnLCB4bFxuICAgIGNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG4gICAgY29uc3QgYnJlYWtQb2ludExHID0gOTkyO1xuICAgIGNvbnN0IGJyZWFrUG9pbnRNRCA9IDc2ODtcbiAgICBjb25zdCBicmVha1BvaW50U00gPSA1NzY7XG4gICAgY29uc3QgYnJlYWtQb2ludFhTID0gNDI1O1xuXG4gICAgLy8gdmFyaWFibGUgd2hpY2ggY2hhbmdlcyBjb2xvciBvZiB0b2dnbGVyIG1lbnUgb24gY2xpY2tcbiAgICBjb25zdCBbdG9nZ2xlQkdDb2xvciwgc2V0VG9nZ2xlQkdDb2xvcl0gPSB1c2VTdGF0ZSgncmdiYSgwLDAsMCwwLjcpJylcblxuICAgIC8vIHRvZ2dsZXMgYmFja2dyb3VuZCBjb2xvciB3aGVuIGRhdGEuaXNIb21lID0gdHJ1ZVxuICAgIGNvbnN0IG9uQ2xpY2tUb2dnbGVCR0NvbG9yID0gKCkgPT4ge1xuICAgICAgICAodG9nZ2xlQkdDb2xvciA9PSAncmdiYSgwLDAsMCwwLjcpJyA/IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC43KScpKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMaW5rU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtgIDogY3NzYGNvbG9yOiAjMzMzMjMyICFpbXBvcnRhbnQ7YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljVG9nZ2xlclN0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY3NzYGJvcmRlcjogbm9uZTsgXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogbm9uZTsgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMnB4OyBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMHB4IDBweCAycHggMHB4OyBcbiAgICAgICAgICAgICAgICB9YFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZHluYW1pY05hdmJhclN0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgZGF0YS5pc0hvbWUgP1xuICAgICAgICAgICAgICAgIGNzc2BwYWRkaW5nOiAxNXB4IDUwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7dG9nZ2xlQkdDb2xvcn07XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7IFxuXG4gICAgICAgICAgICAgICAgICAgIC8vICsgcmlnaHQgLSBsZWZ0IHwgKyBib3R0b20gLSB0b3AgfCBibHVyZSB8IHNpemVcbiAgICAgICAgICAgICAgICAgICAgLy8gYm94LXNoYWRvdzogMHB4IDJweCAxNXB4IDJweCAgcmdiYSgwLDAsMCwwLjcpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRNRH1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMjBweCAyMHB4O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAxNXB4IDE1cHg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BwYWRkaW5nOiAxNXB4IDUwcHg7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjM1LDIyMSwyMDksMS4wKTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50WEx9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIwcHggNDBweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDIwcHggMjBweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNJbWFnZVN0eWxlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICBkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgICAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YFxuICAgICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgZHluYW1pY0xvZ29TdHlsZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgY29sb3I6ICNFREU0RTU7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDEwLjg2cHg7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDtcblxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRMR31weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDI2cHg7IFxuICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogOS44NnB4O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIycHg7IFxuICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogOC44NnB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50WFN9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMXB4OyBcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDUuODZweDtcbiAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgOlxuICAgICAgICAgICAgY3NzYGNvbG9yOiAjMzMzMjMyO1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxMC44NnB4O1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludExHfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDsgXG4gICAgICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiA5Ljg2cHg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMjJweDsgXG4gICAgICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiA4Ljg2cHg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYU31weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIxcHg7IFxuICAgICAgICAgICAgICAgICAgICBsZXR0ZXItc3BhY2luZzogNS44NnB4O1xuICAgICAgICAgICAgICAgIH1gKVxuICAgIH1cblxuICAgIHJldHVybiAoXG5cbiAgICAgICAgPGRpdiBjc3M9e2R5bmFtaWNJbWFnZVN0eWxlfT5cblxuICAgICAgICAgICAgey8qIGNoYW5nZXMgaGFtYnVyZ2VyIGNvbG9yIGFjY29yZGluZyB0byBob21lLCBub3QgaG9tZSB3aXRoIGJvb3RzdHJhcCBkZWZhdWx0IFwiZGFya1wiLCBcImxpZ2h0XCIgKi99XG4gICAgICAgICAgICA8TmF2YmFyIHZhcmlhbnQ9e2RhdGEuaXNIb21lID8gXCJkYXJrXCIgOiBcImxpZ2h0XCJ9IGV4cGFuZD1cInhsXCIgZml4ZWQ9XCJ0b3BcIiBjc3M9e2R5bmFtaWNOYXZiYXJTdHlsZX0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7LyogbG9nbyBBbG1hIFN0b2x0ZSAqL31cbiAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIvXCJ9IGNzcz17ZHluYW1pY0xvZ29TdHlsZX0+QUxNQSBTVE9MVEVcbiAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qIGhhbWJ1cmdlciBidXR0b24gKi99XG4gICAgICAgICAgICAgICAgPE5hdmJhci5Ub2dnbGUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgY3NzPXtkeW5hbWljVG9nZ2xlclN0eWxlfSBvbkNsaWNrPXtvbkNsaWNrVG9nZ2xlQkdDb2xvcn0gLz5cblxuICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIHVuY29sbGFwc2VkICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cblxuICAgICAgICAgICAgICAgICAgICB7LyogdG9nZ2xlIG1lbnUgd2hlbiBjb2xsYXBzZWQgKi99XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCIgY3NzPXtjc3NgbWFyZ2luLXRvcDogMTVweDtgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL2thbGVuZGVyL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PktBTEVOREVSPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvcHJvamVrdGUvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+UFJPSkVLVEU8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi92aXRhL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PlZJVEE8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9tZWRpYS9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5NRURJQTwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL2tvbnRha3QvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+S09OVEFLVDwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgPC9TdHlsZWRUb2dnbGVBcmVhPlxuICAgICAgICAgICAgICAgIDwvTmF2YmFyLkNvbGxhcHNlPlxuXG4gICAgICAgICAgICA8L05hdmJhcj5cblxuICAgICAgICAgICAgPGRpdiBjc3M9e2RhdGEuaXNIb21lID9cbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTIwcHggNTBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCA1MHB4OyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogODBweCAxNXB4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIGNzc2BcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgICAgICAgICAgIGB9PlxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWJIZWFkaW5nPkhpc3RvcmlzY2hlcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5Nb2Rlcm5lcyBWaW9sb25jZWxsbzwvU3R5bGVkU3ViSGVhZGluZz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChOYXZiYXJDdXN0b20pXG5cbi8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbmNvbnN0IGJyZWFrUG9pbnRYTCA9IDExOTk7XG5jb25zdCBicmVha1BvaW50TEcgPSA5OTI7XG5jb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG5jb25zdCBicmVha1BvaW50U00gPSA1NzY7XG5cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgYXBwZWFyID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC4wKTtcbiAgfVxuICB0byB7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgfVxuYDtcblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuY29uc3QgbW92ZXVwID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDUwcHgpO1xuICB9IFxuICB0byB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDBweCk7XG4gIH1cbmA7XG5cblxuXG5jb25zdCBTdHlsZWRUb2dnbGVBcmVhID0gc3R5bGVkKE5hdilgXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWROYXZMaW5rID0gc3R5bGVkKE5hdi5MaW5rKWBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41NnB4O1xuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMTIlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMHB4OyBcblxuICAgIC8vIHN0eWxpbmcgbGluayB0ZXh0IG9uIGhvdmVyXG4gICAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgY29sb3I6IHJnYigxNzUsMTc1LDE3NSkgIWltcG9ydGFudDtcbiAgICB9IFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xuICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDglICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHggIWltcG9ydGFudDsgXG4gICAgfVxuYFxuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const NavbarCustom=({state})=>{// used to determine if the navbar needs to be styled light / dark\nconst data=state.source.get(state.router.link);// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;const breakPointXS=425;// variable which changes color of toggler menu on click\nconst[toggleBGColor,setToggleBGColor]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('rgba(0,0,0,0.7)');// toggles background color when data.isHome = true\nconst onClickToggleBGColor=()=>{toggleBGColor=='rgba(0,0,0,0.7)'?setToggleBGColor('rgba(0,0,0,1)'):setToggleBGColor('rgba(0,0,0,0.7)');};const dynamicLinkStyle=()=>{return data.isHome?_ref5:_ref4;};const dynamicTogglerStyle=()=>{return/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"border:none;background-color:none;padding:2px;@media (max-width: \",breakPointSM,\"px){font-size:18px;padding:0px 0px 2px 0px;}\"+( false?undefined:\";label:dynamicTogglerStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicNavbarStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:\",toggleBGColor,\";display:flex;align-items:center;@media (max-width: \",breakPointMD,\"px){padding:20px 20px;}@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:dynamicNavbarStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:rgba(235,221,209,1.0);@media (max-width: \",breakPointXL,\"px){padding:20px 40px;}@media (max-width: \",breakPointMD,\"px){padding:20px 20px;}@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:dynamicNavbarStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};const dynamicImageStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"background-image:url(\",_assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\");background-size:cover;background-attachment:fixed;background-position:top;height:100vh;width:auto;max-width:100%;\"+( false?undefined:\";label:dynamicImageStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref3;};const dynamicLogoStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#EDE4E5;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;letter-spacing:9.86px;}@media (max-width: \",breakPointSM,\"px){font-size:22px;letter-spacing:8.86px;}@media (max-width: \",breakPointXS,\"px){font-size:21px;letter-spacing:5.86px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#333232;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;letter-spacing:9.86px;}@media (max-width: \",breakPointSM,\"px){font-size:22px;letter-spacing:8.86px;}@media (max-width: \",breakPointXS,\"px){font-size:21px;letter-spacing:5.86px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:dynamicImageStyle,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"],{variant:data.isHome?\"dark\":\"light\",expand:\"xl\",fixed:\"top\",css:dynamicNavbarStyle,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/\",css:dynamicLogoStyle,children:\"ALMA STOLTE\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Toggle,{\"aria-controls\":\"toggle-connection\",css:dynamicTogglerStyle,onClick:onClickToggleBGColor}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Collapse,{id:\"toggle-connection\",className:\"justify-content-end\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(StyledToggleArea,{className:\"mr-auto\",className:\"justify-content-end\",css:_ref2,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kalender/\",css:dynamicLinkStyle,children:\"KALENDER\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/projekte/\",css:dynamicLinkStyle,children:\"PROJEKTE\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/vita/\",css:dynamicLinkStyle,children:\"VITA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/media/\",css:dynamicLinkStyle,children:\"MEDIA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kontakt/\",css:dynamicLinkStyle,children:\"KONTAKT\"})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:120px 50px;@media (max-width: \",breakPointMD,\"px){padding:80px 50px;}@media (max-width: \",breakPointSM,\"px){padding:80px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Historisches Violoncello\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Modernes Violoncello\"})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(NavbarCustom));// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;// -----------------------------------------\nconst appear=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t||(_t=_`\nfrom {\n    color: rgba(219, 204, 205, 0.0);\n  }\n  to {\n    color: rgba(219, 204, 205, 0.9);\n  }\n`));// -----------------------------------------\nconst moveup=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t2||(_t2=_`\nfrom {\n    transform: translateY(50px);\n  } \n  to {\n    transform: translateY(0px);\n  }\n`));const StyledToggleArea=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"],{target:\"en8g08n3\",label:\"StyledToggleArea\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const StyledMargin=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\",{target:\"en8g08n2\",label:\"StyledMargin\"})(\"margin:0px 6%;@media (max-width: \",breakPointXL,\"px){margin:10px 0px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledNavLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"].Link,{target:\"en8g08n1\",label:\"StyledNavLink\"})(\"font-size:16px;color:#EDE4E5!important;letter-spacing:3.56px;margin:0px 0px 0px 12%!important;padding:0px;&:hover{text-decoration:none;cursor:pointer;color:rgb(175,175,175)!important;}@media (max-width: 1500px){margin:0px 0px 0px 8%!important;}@media (max-width: \",breakPointXL,\"px){margin:10px 0px!important;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledSubHeading=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"h4\",{target:\"en8g08n0\",label:\"StyledSubHeading\"})(\"font-family:LibreBaskerville-Italic;font-size:20px;color:rgba(219, 204, 205, 0.9);letter-spacing:3.53px;line-height:30px;animation:\",appear,\" 1.8s ease-in-out;@media (max-width: \",breakPointMD,\"px){font-size:18px;line-height:25px;}@media (max-width: \",breakPointMD,\"px){font-size:16px;line-height:20px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/NavbarCustom.js\n");

/***/ })

})