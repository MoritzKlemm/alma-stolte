webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/Contact.js":
/*!**************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/Contact.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ContactUs; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-bootstrap/Container */ \"./node_modules/react-bootstrap/esm/Container.js\");\n/* harmony import */ var react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-bootstrap/Row */ \"./node_modules/react-bootstrap/esm/Row.js\");\n/* harmony import */ var react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-bootstrap/Col */ \"./node_modules/react-bootstrap/esm/Col.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! emailjs-com */ \"./node_modules/emailjs-com/source/index.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(emailjs_com__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _ContactAlert__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ContactAlert */ \"./packages/alma-stolte-theme/src/components/ContactAlert.js\");\n/* harmony import */ var react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-bootstrap/Alert */ \"./node_modules/react-bootstrap/esm/Alert.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"e9rxon-ContactUs\",styles:\"background-color:rgba(111,147,83,0.5);border:1px solid #6F9353;color:#EDE4E5;&:hover{ackground-color:rgba(111,147,83,0.5);border:1px solid #6F9353;color:#EDE4E5;};label:ContactUs;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"1esoklb-ContactUs\",styles:\"background-color:rgba(111,147,83,1);border:none;color:#EDE4E5;&:hover{background-color:rgba(111,147,83,1);border:none;color:#EDE4E5;};label:ContactUs;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};function ContactUs(){// variable to save if alert is shown. three options: hide, success, failure\nconst[alertStatus,setAlertStatus]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('hide');// variables to keep name updated onChange\nconst[name,setName]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');// variables manipulating bootstrap form control classes \nconst[nameCorrect,setNameCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[email,setEmail]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[emailCorrect,setEmailCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[subject,setSubject]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[subjectCorrect,setSubjectCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[content,setContent]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[contentCorrect,setContentCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])(false);const validateName=nameInput=>{// keep input field \"synchron\" with user input\nsetName(nameInput);// define email pattern \nconst regExName=/^[a-zA-Z\\s]+$/;// create regex object \nconst regExNameObject=new RegExp(regExName);// test regex against user input saved in \"name\"\nlet resultName=regExNameObject.test(name.toLowerCase());// first checks if string is empty because no validation needed if so. if not empty, checking results of regex.\nsetNameCorrect(nameInput==''?'':resultName?\"form-control is-valid\":\"form-control is-invalid\");// needed for final sendEmail function\nreturn resultName;};const validateMail=mailInput=>{setEmail(mailInput);const regExMail=/\\S+@\\S+\\.\\S+/;const regExMailObject=new RegExp(regExMail);let resultMail=regExMailObject.test(email.toLowerCase());setEmailCorrect(mailInput==''?'':resultMail?\"form-control is-valid\":\"form-control is-invalid\");return resultMail;};const validateSubject=subjectInput=>{setSubject(subjectInput);// if subject has more then 1 or less equal to 160 character it is accepted.\nsetSubjectCorrect(subjectInput.length<=1?\"form-control is-invalid\":subjectInput.length<=160?\"form-control is-valid\":\"form-control is-invalid\");};const validateContent=contentInput=>{setContent(contentInput);// accepting if more then 3 characters are in message\nsetContentCorrect(contentInput.length>=3?true:false);};const toggleButton=()=>{if(nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect){return null;}else{\"disabled\";}};function sendEmail(e){e.preventDefault();// check if all fields are correct\nif(nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect){// credentials derived from emailjs.com\nemailjs_com__WEBPACK_IMPORTED_MODULE_10___default.a.sendForm('service_cmv2a0i','template_icmanhg',e.target,'user_qyKXt1Dj8Hq0dM0sJ1q8r').then(result=>{console.log(result.text);if(result.text==\"OK\"){setAlertStatus('success');}},error=>{console.log(error.text);setAlertStatus('failure');});// e.target.reset();\n}else{alert(\"Ihre Eingaben sind noch nicht alle korrekt!\");}}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(StyledContainer,{id:\"contact-smooth-scroll\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"],{className:\"contact-form\",onSubmit:sendEmail,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"user_name\",placeholder:\"Vor -und Nachname\",value:name,onChange:e=>{validateName(e.target.value);},className:nameCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"email\",name:\"user_email\",placeholder:\"Email\",value:email,onChange:e=>{validateMail(e.target.value);},className:emailCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"subject\",placeholder:\"Betreff\",value:subject,onChange:e=>{validateSubject(e.target.value);},className:subjectCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormControlMessage,{as:\"textarea\",rows:8,name:\"message\",placeholder:\"Nachricht an Alma Stolte...\",value:content,onChange:e=>{validateContent(e.target.value);}})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormButton,{disabled:\"disabled\",type:\"submit\",value:\"Send\",css:nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'&&subjectCorrect=='form-control is-valid'&&contentCorrect?_ref2:_ref,children:\"senden\"})})]}),alertStatus=='hide'?null:alertStatus=='success'?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledSuccessAlert,{variant:\"success\",onClick:()=>{setAlertStatus('hide');},dismissible:true,fade:true,show:true,children:\"Ihre Nachricht wurde verschickt!\"}):Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledWarningAlert,{variant:\"warning\",onClick:()=>{setAlertStatus('hide');},dismissible:true,className:\"fade show\",children:\"Achtung! Ihre Nachricht wurde nicht verschickt.\"})]});}const StyledContainer=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{target:\"e1jwy1zu5\",label:\"StyledContainer\"})( false?undefined:{name:\"1wpx54c\",styles:\"max-width:450px;padding:0px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// input styling --------------------------------------\n// bootstrap <input> component. with type = \"x\" saying what type \nconst StyledInput=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu4\",label:\"StyledInput\"})( false?undefined:{name:\"1pgtf25\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:none;border-bottom:1px solid grey;border-radius:0px;padding:2px 10px;margin:20px 0px;&:focus{background-color:transparent;}&::hover{curser:pointer;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledFormControlMessage=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu3\",label:\"StyledFormControlMessage\"})( false?undefined:{name:\"hifqds\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:1px solid grey;border-radius:0px;height:200px;padding:4px 10px;margin-top:50px;&:focus{background-color:transparent;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9Db250YWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBNcUQiLCJmaWxlIjoiL1VzZXJzL21vcml0emtsZW1tL0RvY3VtZW50cy9GaXJtYS9Qcm9qZWt0ZS9hbG1hIHN0b2x0ZS9jb2RlL2FsbWEtc3RvbHRlL3BhY2thZ2VzL2FsbWEtc3RvbHRlLXRoZW1lL3NyYy9jb21wb25lbnRzL0NvbnRhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29udGFpbmVyJ1xuaW1wb3J0IFJvdyBmcm9tICdyZWFjdC1ib290c3RyYXAvUm93J1xuaW1wb3J0IENvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29sJ1xuaW1wb3J0IGVtYWlsanMgZnJvbSAnZW1haWxqcy1jb20nO1xuaW1wb3J0IENvbnRhY3RBbGVydCBmcm9tICcuL0NvbnRhY3RBbGVydCdcbmltcG9ydCBBbGVydCBmcm9tICdyZWFjdC1ib290c3RyYXAvQWxlcnQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhY3RVcygpIHtcblxuICAgIC8vIHZhcmlhYmxlIHRvIHNhdmUgaWYgYWxlcnQgaXMgc2hvd24uIHRocmVlIG9wdGlvbnM6IGhpZGUsIHN1Y2Nlc3MsIGZhaWx1cmVcbiAgICBjb25zdCBbYWxlcnRTdGF0dXMsIHNldEFsZXJ0U3RhdHVzXSA9IHVzZVN0YXRlKCdoaWRlJyk7XG4gICAgXG4gICAgLy8gdmFyaWFibGVzIHRvIGtlZXAgbmFtZSB1cGRhdGVkIG9uQ2hhbmdlXG4gICAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoJycpXG4gICAgLy8gdmFyaWFibGVzIG1hbmlwdWxhdGluZyBib290c3RyYXAgZm9ybSBjb250cm9sIGNsYXNzZXMgXG4gICAgY29uc3QgW25hbWVDb3JyZWN0LCBzZXROYW1lQ29ycmVjdF0gPSB1c2VTdGF0ZSgnZm9ybS1jb250cm9sJylcbiAgICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtlbWFpbENvcnJlY3QsIHNldEVtYWlsQ29ycmVjdF0gPSB1c2VTdGF0ZSgnZm9ybS1jb250cm9sJylcbiAgICBjb25zdCBbc3ViamVjdCwgc2V0U3ViamVjdF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbc3ViamVjdENvcnJlY3QsIHNldFN1YmplY3RDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKSBcbiAgICBcbiAgICBjb25zdCBbY29udGVudCwgc2V0Q29udGVudF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbY29udGVudENvcnJlY3QsIHNldENvbnRlbnRDb3JyZWN0XSA9IHVzZVN0YXRlKGZhbHNlKSBcbiAgICBcbiAgICBjb25zdCB2YWxpZGF0ZU5hbWUgPSAobmFtZUlucHV0KSA9PiB7XG5cbiAgICAgICAgLy8ga2VlcCBpbnB1dCBmaWVsZCBcInN5bmNocm9uXCIgd2l0aCB1c2VyIGlucHV0XG4gICAgICAgIHNldE5hbWUobmFtZUlucHV0KVxuICAgICAgICBcbiAgICAgICAgLy8gZGVmaW5lIGVtYWlsIHBhdHRlcm4gXG4gICAgICAgIGNvbnN0IHJlZ0V4TmFtZSA9IC9eW2EtekEtWlxcc10rJC87XG5cbiAgICAgICAgLy8gY3JlYXRlIHJlZ2V4IG9iamVjdCBcbiAgICAgICAgY29uc3QgcmVnRXhOYW1lT2JqZWN0ID0gbmV3IFJlZ0V4cChyZWdFeE5hbWUpXG5cbiAgICAgICAgLy8gdGVzdCByZWdleCBhZ2FpbnN0IHVzZXIgaW5wdXQgc2F2ZWQgaW4gXCJuYW1lXCJcbiAgICAgICAgbGV0IHJlc3VsdE5hbWUgPSByZWdFeE5hbWVPYmplY3QudGVzdChuYW1lLnRvTG93ZXJDYXNlKCkpXG5cbiAgICAgICAgLy8gZmlyc3QgY2hlY2tzIGlmIHN0cmluZyBpcyBlbXB0eSBiZWNhdXNlIG5vIHZhbGlkYXRpb24gbmVlZGVkIGlmIHNvLiBpZiBub3QgZW1wdHksIGNoZWNraW5nIHJlc3VsdHMgb2YgcmVnZXguXG4gICAgICAgIHNldE5hbWVDb3JyZWN0KG5hbWVJbnB1dCA9PSAnJyA/ICcnIDogcmVzdWx0TmFtZSA/IFwiZm9ybS1jb250cm9sIGlzLXZhbGlkXCIgOiBcImZvcm0tY29udHJvbCBpcy1pbnZhbGlkXCIpO1xuXG4gICAgICAgIC8vIG5lZWRlZCBmb3IgZmluYWwgc2VuZEVtYWlsIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiByZXN1bHROYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRlTWFpbCA9IChtYWlsSW5wdXQpID0+IHtcbiAgICAgICAgc2V0RW1haWwobWFpbElucHV0KVxuXG4gICAgICAgIGNvbnN0IHJlZ0V4TWFpbCA9IC9cXFMrQFxcUytcXC5cXFMrLztcbiAgICAgICAgY29uc3QgcmVnRXhNYWlsT2JqZWN0ID0gbmV3IFJlZ0V4cChyZWdFeE1haWwpXG5cbiAgICAgICAgbGV0IHJlc3VsdE1haWwgPSByZWdFeE1haWxPYmplY3QudGVzdChlbWFpbC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICBzZXRFbWFpbENvcnJlY3QobWFpbElucHV0ID09ICcnID8gJycgOiByZXN1bHRNYWlsID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG4gICAgICAgIHJldHVybiByZXN1bHRNYWlsOyBcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZVN1YmplY3QgPSAoc3ViamVjdElucHV0KSA9PiB7XG4gICAgICAgIHNldFN1YmplY3Qoc3ViamVjdElucHV0KVxuICAgICAgICAvLyBpZiBzdWJqZWN0IGhhcyBtb3JlIHRoZW4gMSBvciBsZXNzIGVxdWFsIHRvIDE2MCBjaGFyYWN0ZXIgaXQgaXMgYWNjZXB0ZWQuXG4gICAgICAgIHNldFN1YmplY3RDb3JyZWN0KHN1YmplY3RJbnB1dC5sZW5ndGggPD0gMSA/IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIiA6IHN1YmplY3RJbnB1dC5sZW5ndGggPD0gMTYwID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHZhbGlkYXRlQ29udGVudCA9IChjb250ZW50SW5wdXQpID0+IHtcbiAgICAgICAgc2V0Q29udGVudChjb250ZW50SW5wdXQpXG4gICAgICAgIC8vIGFjY2VwdGluZyBpZiBtb3JlIHRoZW4gMyBjaGFyYWN0ZXJzIGFyZSBpbiBtZXNzYWdlXG4gICAgICAgIHNldENvbnRlbnRDb3JyZWN0KGNvbnRlbnRJbnB1dC5sZW5ndGggPj0gMyA/IHRydWUgOiBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBpZiggbmFtZUNvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgXG4gICAgICAgICAgICAmJiBlbWFpbENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgXG4gICAgICAgICAgICAmJiBzdWJqZWN0Q29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIGNvbnRlbnRDb3JyZWN0ICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbmRFbWFpbChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBjaGVjayBpZiBhbGwgZmllbGRzIGFyZSBjb3JyZWN0XG4gICAgICAgIGlmKCBuYW1lQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIGVtYWlsQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgJiYgY29udGVudENvcnJlY3QgKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGNyZWRlbnRpYWxzIGRlcml2ZWQgZnJvbSBlbWFpbGpzLmNvbVxuICAgICAgICAgICAgZW1haWxqcy5zZW5kRm9ybSgnc2VydmljZV9jbXYyYTBpJywgJ3RlbXBsYXRlX2ljbWFuaGcnLCBlLnRhcmdldCwgJ3VzZXJfcXlLWHQxRGo4SHEwZE0wc0oxcThyJylcbiAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0LnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50ZXh0ID09IFwiT0tcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEFsZXJ0U3RhdHVzKCdzdWNjZXNzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEFsZXJ0U3RhdHVzKCdmYWlsdXJlJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBlLnRhcmdldC5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxlcnQoXCJJaHJlIEVpbmdhYmVuIHNpbmQgbm9jaCBuaWNodCBhbGxlIGtvcnJla3QhXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkQ29udGFpbmVyIGlkPVwiY29udGFjdC1zbW9vdGgtc2Nyb2xsXCI+XG4gICAgICAgICAgICA8Rm9ybSBjbGFzc05hbWU9XCJjb250YWN0LWZvcm1cIiBvblN1Ym1pdD17c2VuZEVtYWlsfT5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJfbmFtZVwiIHBsYWNlaG9sZGVyPVwiVm9yIC11bmQgTmFjaG5hbWVcIiB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVOYW1lKGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17bmFtZUNvcnJlY3R9Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwidXNlcl9lbWFpbFwiIHBsYWNlaG9sZGVyPVwiRW1haWxcIiB2YWx1ZT17ZW1haWx9IG9uQ2hhbmdlPXsoZSkgPT4ge3ZhbGlkYXRlTWFpbChlLnRhcmdldC52YWx1ZSl9fSBjbGFzc05hbWU9e2VtYWlsQ29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInN1YmplY3RcIiBwbGFjZWhvbGRlcj1cIkJldHJlZmZcIiB2YWx1ZT17c3ViamVjdH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVTdWJqZWN0KGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17c3ViamVjdENvcnJlY3R9Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQ29udHJvbE1lc3NhZ2UgYXM9XCJ0ZXh0YXJlYVwiIHJvd3M9ezh9IG5hbWU9XCJtZXNzYWdlXCIgcGxhY2Vob2xkZXI9XCJOYWNocmljaHQgYW4gQWxtYSBTdG9sdGUuLi5cIiB2YWx1ZT17Y29udGVudH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVDb250ZW50KGUudGFyZ2V0LnZhbHVlKX19Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQnV0dG9uIGRpc2FibGVkPVwiZGlzYWJsZWRcIiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTZW5kXCIgXG5cbiAgICAgICAgICAgICAgICAgICAgY3NzPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIChuYW1lQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGVtYWlsQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdCApIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjRURFNEU1OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDEpOyBib3JkZXI6IG5vbmU7IGNvbG9yOiAjRURFNEU1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWAgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTExLDE0Nyw4MywwLjUpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDAuNSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNkY5MzUzOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlbjwvU3R5bGVkRm9ybUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICA8L0Zvcm0+XG5cbiAgICAgICAgICAgIHsvKiogcmVuZGVyaW5nIGFsZXJ0IGFjY29yZGluZyB0byBcImFsZXJ0U3RhdHVzXCIgKi99XG4gICAgICAgICAgICB7YWxlcnRTdGF0dXMgPT0gJ2hpZGUnID8gbnVsbCA6IFxuICAgICAgICAgICAgICAgIGFsZXJ0U3RhdHVzID09ICdzdWNjZXNzJyA/IFxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWNjZXNzQWxlcnQgdmFyaWFudD1cInN1Y2Nlc3NcIiBvbkNsaWNrPXsoKSA9PiB7IHNldEFsZXJ0U3RhdHVzKCdoaWRlJykgfX0gZGlzbWlzc2libGUgZmFkZSBzaG93PlxuICAgICAgICAgICAgICAgICAgICBJaHJlIE5hY2hyaWNodCB3dXJkZSB2ZXJzY2hpY2t0IVxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU3VjY2Vzc0FsZXJ0PlxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICA8U3R5bGVkV2FybmluZ0FsZXJ0IHZhcmlhbnQ9XCJ3YXJuaW5nXCIgb25DbGljaz17KCkgPT4geyBzZXRBbGVydFN0YXR1cygnaGlkZScpIH19IGRpc21pc3NpYmxlIGNsYXNzTmFtZT1cImZhZGUgc2hvd1wiPlxuICAgICAgICAgICAgICAgICAgICBBY2h0dW5nISBJaHJlIE5hY2hyaWNodCB3dXJkZSBuaWNodCB2ZXJzY2hpY2t0LlxuICAgICAgICAgICAgICAgIDwvU3R5bGVkV2FybmluZ0FsZXJ0PlxuICAgICAgICAgICAgfVxuXG4gICAgICAgIDwvU3R5bGVkQ29udGFpbmVyPlxuICAgICk7XG59XG5cbmNvbnN0IFN0eWxlZENvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICAgIG1heC13aWR0aDogNDUwcHg7IFxuICAgIHBhZGRpbmc6IDBweDsgXG5gXG5cbi8vIGlucHV0IHN0eWxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gYm9vdHN0cmFwIDxpbnB1dD4gY29tcG9uZW50LiB3aXRoIHR5cGUgPSBcInhcIiBzYXlpbmcgd2hhdCB0eXBlIFxuY29uc3QgU3R5bGVkSW5wdXQgPSBzdHlsZWQoRm9ybS5Db250cm9sKWBcbiAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgIGZvbnQtc2l6ZTogMTUuMnB4O1xuICAgIGNvbG9yOiAjNTk1NTU1O1xuICAgIGxldHRlci1zcGFjaW5nOiAxLjBweDtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICBib3JkZXI6IG5vbmU7IFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmV5O1xuICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXG4gICAgcGFkZGluZzogMnB4IDEwcHg7IFxuICAgIG1hcmdpbjogMjBweCAwcHg7IFxuIFxuICAgICY6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgfVxuXG4gICAgJjo6aG92ZXIge1xuICAgICAgICBjdXJzZXI6IHBvaW50ZXI7IFxuICAgIH1cbmBcbmNvbnN0IFN0eWxlZEZvcm1Db250cm9sTWVzc2FnZSA9IHN0eWxlZChGb3JtLkNvbnRyb2wpYFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgZm9udC1zaXplOiAxNS4ycHg7XG4gICAgY29sb3I6ICM1OTU1NTU7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMHB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4OyBcbiAgICBoZWlnaHQ6IDIwMHB4OyBcbiAgICBwYWRkaW5nOiA0cHggMTBweDsgXG4gICAgbWFyZ2luLXRvcDogNTBweDsgXG5cbiAgICAmOmZvY3VzIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIH1cbmBcbmNvbnN0IGJ1dHRvbkhvdmVyID0ga2V5ZnJhbWVzYFxuICAgIGZyb20ge3RyYW5zZm9ybTogYmFja2dyb3VuZC1jb2xvcjogcmVkO31cbiAgICB0byB7dHJhbnNmb3JtOiBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO31cbmBcblxuY29uc3QgU3R5bGVkRm9ybUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICBmb250LXNpemU6IDE1LjJweDtcbiAgICBsZXR0ZXItc3BhY2luZzogMS4wcHg7XG4gICAgd2lkdGg6IDEwMCU7IFxuICAgIGhlaWdodDogMzVweDtcbiAgICBjb2xvcjogd2hpdGU7IFxuICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVGODA0NjtcbiAgICB9XG5gXG5jb25zdCBTdHlsZWRTdWNjZXNzQWxlcnQgPSBzdHlsZWQoQWxlcnQpYFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzZGOTM1MzsgXG4gICAgY29sb3I6ICM2RjkzNTM7XG5gXG5cbmNvbnN0IFN0eWxlZFdhcm5pbmdBbGVydCA9IHN0eWxlZChBbGVydClgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjQkY0RTMwOyBcbiAgICBjb2xvcjogI0JGNEUzMDtcbmAiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const buttonHover=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"keyframes\"])(_t||(_t=_`\n    from {transform: background-color: red;}\n    to {transform: background-color: blue;}\n`));const StyledFormButton=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"button\",{target:\"e1jwy1zu2\",label:\"StyledFormButton\"})( false?undefined:{name:\"12h44pz\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;letter-spacing:1.0px;width:100%;height:35px;color:white;border-radius:0px;&:hover{background-color:#5F8046;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledSuccessAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu1\",label:\"StyledSuccessAlert\"})( false?undefined:{name:\"19jywi1\",styles:\"background-color:transparent!important;border:1px solid #6F9353;color:#6F9353\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledWarningAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu0\",label:\"StyledWarningAlert\"})( false?undefined:{name:\"zdnu7z\",styles:\"background-color:transparent!important;border:1px solid #BF4E30;color:#BF4E30\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9Db250YWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1Qd0MiLCJmaWxlIjoiL1VzZXJzL21vcml0emtsZW1tL0RvY3VtZW50cy9GaXJtYS9Qcm9qZWt0ZS9hbG1hIHN0b2x0ZS9jb2RlL2FsbWEtc3RvbHRlL3BhY2thZ2VzL2FsbWEtc3RvbHRlLXRoZW1lL3NyYy9jb21wb25lbnRzL0NvbnRhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29udGFpbmVyJ1xuaW1wb3J0IFJvdyBmcm9tICdyZWFjdC1ib290c3RyYXAvUm93J1xuaW1wb3J0IENvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29sJ1xuaW1wb3J0IGVtYWlsanMgZnJvbSAnZW1haWxqcy1jb20nO1xuaW1wb3J0IENvbnRhY3RBbGVydCBmcm9tICcuL0NvbnRhY3RBbGVydCdcbmltcG9ydCBBbGVydCBmcm9tICdyZWFjdC1ib290c3RyYXAvQWxlcnQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhY3RVcygpIHtcblxuICAgIC8vIHZhcmlhYmxlIHRvIHNhdmUgaWYgYWxlcnQgaXMgc2hvd24uIHRocmVlIG9wdGlvbnM6IGhpZGUsIHN1Y2Nlc3MsIGZhaWx1cmVcbiAgICBjb25zdCBbYWxlcnRTdGF0dXMsIHNldEFsZXJ0U3RhdHVzXSA9IHVzZVN0YXRlKCdoaWRlJyk7XG4gICAgXG4gICAgLy8gdmFyaWFibGVzIHRvIGtlZXAgbmFtZSB1cGRhdGVkIG9uQ2hhbmdlXG4gICAgY29uc3QgW25hbWUsIHNldE5hbWVdID0gdXNlU3RhdGUoJycpXG4gICAgLy8gdmFyaWFibGVzIG1hbmlwdWxhdGluZyBib290c3RyYXAgZm9ybSBjb250cm9sIGNsYXNzZXMgXG4gICAgY29uc3QgW25hbWVDb3JyZWN0LCBzZXROYW1lQ29ycmVjdF0gPSB1c2VTdGF0ZSgnZm9ybS1jb250cm9sJylcbiAgICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtlbWFpbENvcnJlY3QsIHNldEVtYWlsQ29ycmVjdF0gPSB1c2VTdGF0ZSgnZm9ybS1jb250cm9sJylcbiAgICBjb25zdCBbc3ViamVjdCwgc2V0U3ViamVjdF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbc3ViamVjdENvcnJlY3QsIHNldFN1YmplY3RDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKSBcbiAgICBcbiAgICBjb25zdCBbY29udGVudCwgc2V0Q29udGVudF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbY29udGVudENvcnJlY3QsIHNldENvbnRlbnRDb3JyZWN0XSA9IHVzZVN0YXRlKGZhbHNlKSBcbiAgICBcbiAgICBjb25zdCB2YWxpZGF0ZU5hbWUgPSAobmFtZUlucHV0KSA9PiB7XG5cbiAgICAgICAgLy8ga2VlcCBpbnB1dCBmaWVsZCBcInN5bmNocm9uXCIgd2l0aCB1c2VyIGlucHV0XG4gICAgICAgIHNldE5hbWUobmFtZUlucHV0KVxuICAgICAgICBcbiAgICAgICAgLy8gZGVmaW5lIGVtYWlsIHBhdHRlcm4gXG4gICAgICAgIGNvbnN0IHJlZ0V4TmFtZSA9IC9eW2EtekEtWlxcc10rJC87XG5cbiAgICAgICAgLy8gY3JlYXRlIHJlZ2V4IG9iamVjdCBcbiAgICAgICAgY29uc3QgcmVnRXhOYW1lT2JqZWN0ID0gbmV3IFJlZ0V4cChyZWdFeE5hbWUpXG5cbiAgICAgICAgLy8gdGVzdCByZWdleCBhZ2FpbnN0IHVzZXIgaW5wdXQgc2F2ZWQgaW4gXCJuYW1lXCJcbiAgICAgICAgbGV0IHJlc3VsdE5hbWUgPSByZWdFeE5hbWVPYmplY3QudGVzdChuYW1lLnRvTG93ZXJDYXNlKCkpXG5cbiAgICAgICAgLy8gZmlyc3QgY2hlY2tzIGlmIHN0cmluZyBpcyBlbXB0eSBiZWNhdXNlIG5vIHZhbGlkYXRpb24gbmVlZGVkIGlmIHNvLiBpZiBub3QgZW1wdHksIGNoZWNraW5nIHJlc3VsdHMgb2YgcmVnZXguXG4gICAgICAgIHNldE5hbWVDb3JyZWN0KG5hbWVJbnB1dCA9PSAnJyA/ICcnIDogcmVzdWx0TmFtZSA/IFwiZm9ybS1jb250cm9sIGlzLXZhbGlkXCIgOiBcImZvcm0tY29udHJvbCBpcy1pbnZhbGlkXCIpO1xuXG4gICAgICAgIC8vIG5lZWRlZCBmb3IgZmluYWwgc2VuZEVtYWlsIGZ1bmN0aW9uXG4gICAgICAgIHJldHVybiByZXN1bHROYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRlTWFpbCA9IChtYWlsSW5wdXQpID0+IHtcbiAgICAgICAgc2V0RW1haWwobWFpbElucHV0KVxuXG4gICAgICAgIGNvbnN0IHJlZ0V4TWFpbCA9IC9cXFMrQFxcUytcXC5cXFMrLztcbiAgICAgICAgY29uc3QgcmVnRXhNYWlsT2JqZWN0ID0gbmV3IFJlZ0V4cChyZWdFeE1haWwpXG5cbiAgICAgICAgbGV0IHJlc3VsdE1haWwgPSByZWdFeE1haWxPYmplY3QudGVzdChlbWFpbC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICBzZXRFbWFpbENvcnJlY3QobWFpbElucHV0ID09ICcnID8gJycgOiByZXN1bHRNYWlsID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG4gICAgICAgIHJldHVybiByZXN1bHRNYWlsOyBcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZVN1YmplY3QgPSAoc3ViamVjdElucHV0KSA9PiB7XG4gICAgICAgIHNldFN1YmplY3Qoc3ViamVjdElucHV0KVxuICAgICAgICAvLyBpZiBzdWJqZWN0IGhhcyBtb3JlIHRoZW4gMSBvciBsZXNzIGVxdWFsIHRvIDE2MCBjaGFyYWN0ZXIgaXQgaXMgYWNjZXB0ZWQuXG4gICAgICAgIHNldFN1YmplY3RDb3JyZWN0KHN1YmplY3RJbnB1dC5sZW5ndGggPD0gMSA/IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIiA6IHN1YmplY3RJbnB1dC5sZW5ndGggPD0gMTYwID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHZhbGlkYXRlQ29udGVudCA9IChjb250ZW50SW5wdXQpID0+IHtcbiAgICAgICAgc2V0Q29udGVudChjb250ZW50SW5wdXQpXG4gICAgICAgIC8vIGFjY2VwdGluZyBpZiBtb3JlIHRoZW4gMyBjaGFyYWN0ZXJzIGFyZSBpbiBtZXNzYWdlXG4gICAgICAgIHNldENvbnRlbnRDb3JyZWN0KGNvbnRlbnRJbnB1dC5sZW5ndGggPj0gMyA/IHRydWUgOiBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlQnV0dG9uID0gKCkgPT4ge1xuICAgICAgICBpZiggbmFtZUNvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgXG4gICAgICAgICAgICAmJiBlbWFpbENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgXG4gICAgICAgICAgICAmJiBzdWJqZWN0Q29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIGNvbnRlbnRDb3JyZWN0ICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbmRFbWFpbChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBjaGVjayBpZiBhbGwgZmllbGRzIGFyZSBjb3JyZWN0XG4gICAgICAgIGlmKCBuYW1lQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIGVtYWlsQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgJiYgY29udGVudENvcnJlY3QgKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGNyZWRlbnRpYWxzIGRlcml2ZWQgZnJvbSBlbWFpbGpzLmNvbVxuICAgICAgICAgICAgZW1haWxqcy5zZW5kRm9ybSgnc2VydmljZV9jbXYyYTBpJywgJ3RlbXBsYXRlX2ljbWFuaGcnLCBlLnRhcmdldCwgJ3VzZXJfcXlLWHQxRGo4SHEwZE0wc0oxcThyJylcbiAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzdWx0LnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC50ZXh0ID09IFwiT0tcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEFsZXJ0U3RhdHVzKCdzdWNjZXNzJylcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEFsZXJ0U3RhdHVzKCdmYWlsdXJlJylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAvLyBlLnRhcmdldC5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxlcnQoXCJJaHJlIEVpbmdhYmVuIHNpbmQgbm9jaCBuaWNodCBhbGxlIGtvcnJla3QhXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8U3R5bGVkQ29udGFpbmVyIGlkPVwiY29udGFjdC1zbW9vdGgtc2Nyb2xsXCI+XG4gICAgICAgICAgICA8Rm9ybSBjbGFzc05hbWU9XCJjb250YWN0LWZvcm1cIiBvblN1Ym1pdD17c2VuZEVtYWlsfT5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJfbmFtZVwiIHBsYWNlaG9sZGVyPVwiVm9yIC11bmQgTmFjaG5hbWVcIiB2YWx1ZT17bmFtZX0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVOYW1lKGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17bmFtZUNvcnJlY3R9Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRJbnB1dCB0eXBlPVwiZW1haWxcIiBuYW1lPVwidXNlcl9lbWFpbFwiIHBsYWNlaG9sZGVyPVwiRW1haWxcIiB2YWx1ZT17ZW1haWx9IG9uQ2hhbmdlPXsoZSkgPT4ge3ZhbGlkYXRlTWFpbChlLnRhcmdldC52YWx1ZSl9fSBjbGFzc05hbWU9e2VtYWlsQ29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInN1YmplY3RcIiBwbGFjZWhvbGRlcj1cIkJldHJlZmZcIiB2YWx1ZT17c3ViamVjdH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVTdWJqZWN0KGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17c3ViamVjdENvcnJlY3R9Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQ29udHJvbE1lc3NhZ2UgYXM9XCJ0ZXh0YXJlYVwiIHJvd3M9ezh9IG5hbWU9XCJtZXNzYWdlXCIgcGxhY2Vob2xkZXI9XCJOYWNocmljaHQgYW4gQWxtYSBTdG9sdGUuLi5cIiB2YWx1ZT17Y29udGVudH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVDb250ZW50KGUudGFyZ2V0LnZhbHVlKX19Lz5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgPEZvcm0uR3JvdXA+XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRGb3JtQnV0dG9uIGRpc2FibGVkPVwiZGlzYWJsZWRcIiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTZW5kXCIgXG5cbiAgICAgICAgICAgICAgICAgICAgY3NzPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIChuYW1lQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGVtYWlsQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdCApIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc2BiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiBub25lOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAjRURFNEU1OyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDEpOyBib3JkZXI6IG5vbmU7IGNvbG9yOiAjRURFNEU1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWAgXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTExLDE0Nyw4MywwLjUpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJjpob3ZlciB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDAuNSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjNkY5MzUzOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRlbjwvU3R5bGVkRm9ybUJ1dHRvbj5cbiAgICAgICAgICAgICAgICA8L0Zvcm0uR3JvdXA+XG4gICAgICAgICAgICA8L0Zvcm0+XG5cbiAgICAgICAgICAgIHsvKiogcmVuZGVyaW5nIGFsZXJ0IGFjY29yZGluZyB0byBcImFsZXJ0U3RhdHVzXCIgKi99XG4gICAgICAgICAgICB7YWxlcnRTdGF0dXMgPT0gJ2hpZGUnID8gbnVsbCA6IFxuICAgICAgICAgICAgICAgIGFsZXJ0U3RhdHVzID09ICdzdWNjZXNzJyA/IFxuICAgICAgICAgICAgICAgIDxTdHlsZWRTdWNjZXNzQWxlcnQgdmFyaWFudD1cInN1Y2Nlc3NcIiBvbkNsaWNrPXsoKSA9PiB7IHNldEFsZXJ0U3RhdHVzKCdoaWRlJykgfX0gZGlzbWlzc2libGUgZmFkZSBzaG93PlxuICAgICAgICAgICAgICAgICAgICBJaHJlIE5hY2hyaWNodCB3dXJkZSB2ZXJzY2hpY2t0IVxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU3VjY2Vzc0FsZXJ0PlxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICA8U3R5bGVkV2FybmluZ0FsZXJ0IHZhcmlhbnQ9XCJ3YXJuaW5nXCIgb25DbGljaz17KCkgPT4geyBzZXRBbGVydFN0YXR1cygnaGlkZScpIH19IGRpc21pc3NpYmxlIGNsYXNzTmFtZT1cImZhZGUgc2hvd1wiPlxuICAgICAgICAgICAgICAgICAgICBBY2h0dW5nISBJaHJlIE5hY2hyaWNodCB3dXJkZSBuaWNodCB2ZXJzY2hpY2t0LlxuICAgICAgICAgICAgICAgIDwvU3R5bGVkV2FybmluZ0FsZXJ0PlxuICAgICAgICAgICAgfVxuXG4gICAgICAgIDwvU3R5bGVkQ29udGFpbmVyPlxuICAgICk7XG59XG5cbmNvbnN0IFN0eWxlZENvbnRhaW5lciA9IHN0eWxlZChDb250YWluZXIpYFxuICAgIG1heC13aWR0aDogNDUwcHg7IFxuICAgIHBhZGRpbmc6IDBweDsgXG5gXG5cbi8vIGlucHV0IHN0eWxpbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLy8gYm9vdHN0cmFwIDxpbnB1dD4gY29tcG9uZW50LiB3aXRoIHR5cGUgPSBcInhcIiBzYXlpbmcgd2hhdCB0eXBlIFxuY29uc3QgU3R5bGVkSW5wdXQgPSBzdHlsZWQoRm9ybS5Db250cm9sKWBcbiAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgIGZvbnQtc2l6ZTogMTUuMnB4O1xuICAgIGNvbG9yOiAjNTk1NTU1O1xuICAgIGxldHRlci1zcGFjaW5nOiAxLjBweDtcbiAgICB0ZXh0LWFsaWduOiBqdXN0aWZ5O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICBib3JkZXI6IG5vbmU7IFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmV5O1xuICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXG4gICAgcGFkZGluZzogMnB4IDEwcHg7IFxuICAgIG1hcmdpbjogMjBweCAwcHg7IFxuIFxuICAgICY6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgfVxuXG4gICAgJjo6aG92ZXIge1xuICAgICAgICBjdXJzZXI6IHBvaW50ZXI7IFxuICAgIH1cbmBcbmNvbnN0IFN0eWxlZEZvcm1Db250cm9sTWVzc2FnZSA9IHN0eWxlZChGb3JtLkNvbnRyb2wpYFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgZm9udC1zaXplOiAxNS4ycHg7XG4gICAgY29sb3I6ICM1OTU1NTU7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMHB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGdyZXk7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4OyBcbiAgICBoZWlnaHQ6IDIwMHB4OyBcbiAgICBwYWRkaW5nOiA0cHggMTBweDsgXG4gICAgbWFyZ2luLXRvcDogNTBweDsgXG5cbiAgICAmOmZvY3VzIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIH1cbmBcbmNvbnN0IGJ1dHRvbkhvdmVyID0ga2V5ZnJhbWVzYFxuICAgIGZyb20ge3RyYW5zZm9ybTogYmFja2dyb3VuZC1jb2xvcjogcmVkO31cbiAgICB0byB7dHJhbnNmb3JtOiBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO31cbmBcblxuY29uc3QgU3R5bGVkRm9ybUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICBmb250LXNpemU6IDE1LjJweDtcbiAgICBsZXR0ZXItc3BhY2luZzogMS4wcHg7XG4gICAgd2lkdGg6IDEwMCU7IFxuICAgIGhlaWdodDogMzVweDtcbiAgICBjb2xvcjogd2hpdGU7IFxuICAgIGJvcmRlci1yYWRpdXM6IDBweDsgXG5cbiAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzVGODA0NjtcbiAgICB9XG5gXG5jb25zdCBTdHlsZWRTdWNjZXNzQWxlcnQgPSBzdHlsZWQoQWxlcnQpYFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgIzZGOTM1MzsgXG4gICAgY29sb3I6ICM2RjkzNTM7XG5gXG5cbmNvbnN0IFN0eWxlZFdhcm5pbmdBbGVydCA9IHN0eWxlZChBbGVydClgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjQkY0RTMwOyBcbiAgICBjb2xvcjogI0JGNEUzMDtcbmAiXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9Db250YWN0LmpzP2E2OTQiXSwibmFtZXMiOlsiQ29udGFjdFVzIiwiYWxlcnRTdGF0dXMiLCJzZXRBbGVydFN0YXR1cyIsInVzZVN0YXRlIiwibmFtZSIsInNldE5hbWUiLCJuYW1lQ29ycmVjdCIsInNldE5hbWVDb3JyZWN0IiwiZW1haWwiLCJzZXRFbWFpbCIsImVtYWlsQ29ycmVjdCIsInNldEVtYWlsQ29ycmVjdCIsInN1YmplY3QiLCJzZXRTdWJqZWN0Iiwic3ViamVjdENvcnJlY3QiLCJzZXRTdWJqZWN0Q29ycmVjdCIsImNvbnRlbnQiLCJzZXRDb250ZW50IiwiY29udGVudENvcnJlY3QiLCJzZXRDb250ZW50Q29ycmVjdCIsInZhbGlkYXRlTmFtZSIsIm5hbWVJbnB1dCIsInJlZ0V4TmFtZSIsInJlZ0V4TmFtZU9iamVjdCIsIlJlZ0V4cCIsInJlc3VsdE5hbWUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJ2YWxpZGF0ZU1haWwiLCJtYWlsSW5wdXQiLCJyZWdFeE1haWwiLCJyZWdFeE1haWxPYmplY3QiLCJyZXN1bHRNYWlsIiwidmFsaWRhdGVTdWJqZWN0Iiwic3ViamVjdElucHV0IiwibGVuZ3RoIiwidmFsaWRhdGVDb250ZW50IiwiY29udGVudElucHV0IiwidG9nZ2xlQnV0dG9uIiwic2VuZEVtYWlsIiwiZSIsInByZXZlbnREZWZhdWx0IiwiZW1haWxqcyIsInNlbmRGb3JtIiwidGFyZ2V0IiwidGhlbiIsInJlc3VsdCIsImNvbnNvbGUiLCJsb2ciLCJ0ZXh0IiwiZXJyb3IiLCJhbGVydCIsInZhbHVlIiwiU3R5bGVkQ29udGFpbmVyIiwiQ29udGFpbmVyIiwiU3R5bGVkSW5wdXQiLCJGb3JtIiwiQ29udHJvbCIsIlN0eWxlZEZvcm1Db250cm9sTWVzc2FnZSIsImJ1dHRvbkhvdmVyIiwia2V5ZnJhbWVzIiwiU3R5bGVkRm9ybUJ1dHRvbiIs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QUNDLDhEQUFQLGlEQUFILHMyWkFBeEIsQ0FNQSxLQUFNQyxtQkFBa0IsQ0FBRyxvRUFBTSxDQUFDRCw4REFBUCxpREFBSCxxMlpBQXhCIiwiZmlsZSI6Ii4vcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvQ29udGFjdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNvbm5lY3QsIHN0eWxlZCwgY3NzLCBrZXlmcmFtZXMgfSBmcm9tICdmcm9udGl0eSc7XG5pbXBvcnQgeyBGb3JtLCBCdXR0b24gfSBmcm9tICdyZWFjdC1ib290c3RyYXAnXG5pbXBvcnQgQ29udGFpbmVyIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9Db250YWluZXInXG5pbXBvcnQgUm93IGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9Sb3cnXG5pbXBvcnQgQ29sIGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9Db2wnXG5pbXBvcnQgZW1haWxqcyBmcm9tICdlbWFpbGpzLWNvbSc7XG5pbXBvcnQgQ29udGFjdEFsZXJ0IGZyb20gJy4vQ29udGFjdEFsZXJ0J1xuaW1wb3J0IEFsZXJ0IGZyb20gJ3JlYWN0LWJvb3RzdHJhcC9BbGVydCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udGFjdFVzKCkge1xuXG4gICAgLy8gdmFyaWFibGUgdG8gc2F2ZSBpZiBhbGVydCBpcyBzaG93bi4gdGhyZWUgb3B0aW9uczogaGlkZSwgc3VjY2VzcywgZmFpbHVyZVxuICAgIGNvbnN0IFthbGVydFN0YXR1cywgc2V0QWxlcnRTdGF0dXNdID0gdXNlU3RhdGUoJ2hpZGUnKTtcbiAgICBcbiAgICAvLyB2YXJpYWJsZXMgdG8ga2VlcCBuYW1lIHVwZGF0ZWQgb25DaGFuZ2VcbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZSgnJylcbiAgICAvLyB2YXJpYWJsZXMgbWFuaXB1bGF0aW5nIGJvb3RzdHJhcCBmb3JtIGNvbnRyb2wgY2xhc3NlcyBcbiAgICBjb25zdCBbbmFtZUNvcnJlY3QsIHNldE5hbWVDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuICAgIGNvbnN0IFtlbWFpbCwgc2V0RW1haWxdID0gdXNlU3RhdGUoJycpXG4gICAgY29uc3QgW2VtYWlsQ29ycmVjdCwgc2V0RW1haWxDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuICAgIGNvbnN0IFtzdWJqZWN0LCBzZXRTdWJqZWN0XSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtzdWJqZWN0Q29ycmVjdCwgc2V0U3ViamVjdENvcnJlY3RdID0gdXNlU3RhdGUoJ2Zvcm0tY29udHJvbCcpIFxuICAgIFxuICAgIGNvbnN0IFtjb250ZW50LCBzZXRDb250ZW50XSA9IHVzZVN0YXRlKCcnKVxuICAgIGNvbnN0IFtjb250ZW50Q29ycmVjdCwgc2V0Q29udGVudENvcnJlY3RdID0gdXNlU3RhdGUoZmFsc2UpIFxuICAgIFxuICAgIGNvbnN0IHZhbGlkYXRlTmFtZSA9IChuYW1lSW5wdXQpID0+IHtcblxuICAgICAgICAvLyBrZWVwIGlucHV0IGZpZWxkIFwic3luY2hyb25cIiB3aXRoIHVzZXIgaW5wdXRcbiAgICAgICAgc2V0TmFtZShuYW1lSW5wdXQpXG4gICAgICAgIFxuICAgICAgICAvLyBkZWZpbmUgZW1haWwgcGF0dGVybiBcbiAgICAgICAgY29uc3QgcmVnRXhOYW1lID0gL15bYS16QS1aXFxzXSskLztcblxuICAgICAgICAvLyBjcmVhdGUgcmVnZXggb2JqZWN0IFxuICAgICAgICBjb25zdCByZWdFeE5hbWVPYmplY3QgPSBuZXcgUmVnRXhwKHJlZ0V4TmFtZSlcblxuICAgICAgICAvLyB0ZXN0IHJlZ2V4IGFnYWluc3QgdXNlciBpbnB1dCBzYXZlZCBpbiBcIm5hbWVcIlxuICAgICAgICBsZXQgcmVzdWx0TmFtZSA9IHJlZ0V4TmFtZU9iamVjdC50ZXN0KG5hbWUudG9Mb3dlckNhc2UoKSlcblxuICAgICAgICAvLyBmaXJzdCBjaGVja3MgaWYgc3RyaW5nIGlzIGVtcHR5IGJlY2F1c2Ugbm8gdmFsaWRhdGlvbiBuZWVkZWQgaWYgc28uIGlmIG5vdCBlbXB0eSwgY2hlY2tpbmcgcmVzdWx0cyBvZiByZWdleC5cbiAgICAgICAgc2V0TmFtZUNvcnJlY3QobmFtZUlucHV0ID09ICcnID8gJycgOiByZXN1bHROYW1lID8gXCJmb3JtLWNvbnRyb2wgaXMtdmFsaWRcIiA6IFwiZm9ybS1jb250cm9sIGlzLWludmFsaWRcIik7XG5cbiAgICAgICAgLy8gbmVlZGVkIGZvciBmaW5hbCBzZW5kRW1haWwgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuIHJlc3VsdE5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGVNYWlsID0gKG1haWxJbnB1dCkgPT4ge1xuICAgICAgICBzZXRFbWFpbChtYWlsSW5wdXQpXG5cbiAgICAgICAgY29uc3QgcmVnRXhNYWlsID0gL1xcUytAXFxTK1xcLlxcUysvO1xuICAgICAgICBjb25zdCByZWdFeE1haWxPYmplY3QgPSBuZXcgUmVnRXhwKHJlZ0V4TWFpbClcblxuICAgICAgICBsZXQgcmVzdWx0TWFpbCA9IHJlZ0V4TWFpbE9iamVjdC50ZXN0KGVtYWlsLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIHNldEVtYWlsQ29ycmVjdChtYWlsSW5wdXQgPT0gJycgPyAnJyA6IHJlc3VsdE1haWwgPyBcImZvcm0tY29udHJvbCBpcy12YWxpZFwiIDogXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdE1haWw7IFxuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkYXRlU3ViamVjdCA9IChzdWJqZWN0SW5wdXQpID0+IHtcbiAgICAgICAgc2V0U3ViamVjdChzdWJqZWN0SW5wdXQpXG4gICAgICAgIC8vIGlmIHN1YmplY3QgaGFzIG1vcmUgdGhlbiAxIG9yIGxlc3MgZXF1YWwgdG8gMTYwIGNoYXJhY3RlciBpdCBpcyBhY2NlcHRlZC5cbiAgICAgICAgc2V0U3ViamVjdENvcnJlY3Qoc3ViamVjdElucHV0Lmxlbmd0aCA8PSAxID8gXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiIDogc3ViamVjdElucHV0Lmxlbmd0aCA8PSAxNjAgPyBcImZvcm0tY29udHJvbCBpcy12YWxpZFwiIDogXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgdmFsaWRhdGVDb250ZW50ID0gKGNvbnRlbnRJbnB1dCkgPT4ge1xuICAgICAgICBzZXRDb250ZW50KGNvbnRlbnRJbnB1dClcbiAgICAgICAgLy8gYWNjZXB0aW5nIGlmIG1vcmUgdGhlbiAzIGNoYXJhY3RlcnMgYXJlIGluIG1lc3NhZ2VcbiAgICAgICAgc2V0Q29udGVudENvcnJlY3QoY29udGVudElucHV0Lmxlbmd0aCA+PSAzID8gdHJ1ZSA6IGZhbHNlKTtcbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVCdXR0b24gPSAoKSA9PiB7XG4gICAgICAgIGlmKCBuYW1lQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIGVtYWlsQ29ycmVjdCA9PSAnZm9ybS1jb250cm9sIGlzLXZhbGlkJyBcbiAgICAgICAgICAgICYmIHN1YmplY3RDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgJiYgY29udGVudENvcnJlY3QgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXCJkaXNhYmxlZFwiXG4gICAgICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2VuZEVtYWlsKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIGFsbCBmaWVsZHMgYXJlIGNvcnJlY3RcbiAgICAgICAgaWYoIG5hbWVDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgJiYgZW1haWxDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgJiYgc3ViamVjdENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgXG4gICAgICAgICAgICAmJiBjb250ZW50Q29ycmVjdCApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gY3JlZGVudGlhbHMgZGVyaXZlZCBmcm9tIGVtYWlsanMuY29tXG4gICAgICAgICAgICBlbWFpbGpzLnNlbmRGb3JtKCdzZXJ2aWNlX2NtdjJhMGknLCAndGVtcGxhdGVfaWNtYW5oZycsIGUudGFyZ2V0LCAndXNlcl9xeUtYdDFEajhIcTBkTTBzSjFxOHInKVxuICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQudGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnRleHQgPT0gXCJPS1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWxlcnRTdGF0dXMoJ3N1Y2Nlc3MnKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0QWxlcnRTdGF0dXMoJ2ZhaWx1cmUnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vIGUudGFyZ2V0LnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbGVydChcIklocmUgRWluZ2FiZW4gc2luZCBub2NoIG5pY2h0IGFsbGUga29ycmVrdCFcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRDb250YWluZXIgaWQ9XCJjb250YWN0LXNtb290aC1zY3JvbGxcIj5cbiAgICAgICAgICAgIDxGb3JtIGNsYXNzTmFtZT1cImNvbnRhY3QtZm9ybVwiIG9uU3VibWl0PXtzZW5kRW1haWx9PlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkSW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlcl9uYW1lXCIgcGxhY2Vob2xkZXI9XCJWb3IgLXVuZCBOYWNobmFtZVwiIHZhbHVlPXtuYW1lfSBvbkNoYW5nZT17KGUpID0+IHt2YWxpZGF0ZU5hbWUoZS50YXJnZXQudmFsdWUpfX0gY2xhc3NOYW1lPXtuYW1lQ29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJ1c2VyX2VtYWlsXCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHZhbHVlPXtlbWFpbH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVNYWlsKGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17ZW1haWxDb3JyZWN0fS8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkSW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwic3ViamVjdFwiIHBsYWNlaG9sZGVyPVwiQmV0cmVmZlwiIHZhbHVlPXtzdWJqZWN0fSBvbkNoYW5nZT17KGUpID0+IHt2YWxpZGF0ZVN1YmplY3QoZS50YXJnZXQudmFsdWUpfX0gY2xhc3NOYW1lPXtzdWJqZWN0Q29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZEZvcm1Db250cm9sTWVzc2FnZSBhcz1cInRleHRhcmVhXCIgcm93cz17OH0gbmFtZT1cIm1lc3NhZ2VcIiBwbGFjZWhvbGRlcj1cIk5hY2hyaWNodCBhbiBBbG1hIFN0b2x0ZS4uLlwiIHZhbHVlPXtjb250ZW50fSBvbkNoYW5nZT17KGUpID0+IHt2YWxpZGF0ZUNvbnRlbnQoZS50YXJnZXQudmFsdWUpfX0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZEZvcm1CdXR0b24gZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIHR5cGU9XCJzdWJtaXRcIiB2YWx1ZT1cIlNlbmRcIiBcblxuICAgICAgICAgICAgICAgICAgICBjc3M9e1xuICAgICAgICAgICAgICAgICAgICAgICAgKG5hbWVDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgZW1haWxDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnIFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgc3ViamVjdENvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGNvbnRlbnRDb3JyZWN0ICkgXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzYGJhY2tncm91bmQtY29sb3I6IHJnYmEoMTExLDE0Nyw4MywxKTsgXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG5vbmU7IFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICNFREU0RTU7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMSk7IGJvcmRlcjogbm9uZTsgY29sb3I6ICNFREU0RTVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YCBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXG4gICAgICAgICAgICAgICAgICAgICAgICBjc3NgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgxMTEsMTQ3LDgzLDAuNSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzZGOTM1MzsgXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDExMSwxNDcsODMsMC41KTsgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogI0VERTRFNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICB9PlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZGVuPC9TdHlsZWRGb3JtQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgIDwvRm9ybT5cblxuICAgICAgICAgICAgey8qKiByZW5kZXJpbmcgYWxlcnQgYWNjb3JkaW5nIHRvIFwiYWxlcnRTdGF0dXNcIiAqL31cbiAgICAgICAgICAgIHthbGVydFN0YXR1cyA9PSAnaGlkZScgPyBudWxsIDogXG4gICAgICAgICAgICAgICAgYWxlcnRTdGF0dXMgPT0gJ3N1Y2Nlc3MnID8gXG4gICAgICAgICAgICAgICAgPFN0eWxlZFN1Y2Nlc3NBbGVydCB2YXJpYW50PVwic3VjY2Vzc1wiIG9uQ2xpY2s9eygpID0+IHsgc2V0QWxlcnRTdGF0dXMoJ2hpZGUnKSB9fSBkaXNtaXNzaWJsZSBmYWRlIHNob3c+XG4gICAgICAgICAgICAgICAgICAgIElocmUgTmFjaHJpY2h0IHd1cmRlIHZlcnNjaGlja3QhXG4gICAgICAgICAgICAgICAgPC9TdHlsZWRTdWNjZXNzQWxlcnQ+XG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIDxTdHlsZWRXYXJuaW5nQWxlcnQgdmFyaWFudD1cIndhcm5pbmdcIiBvbkNsaWNrPXsoKSA9PiB7IHNldEFsZXJ0U3RhdHVzKCdoaWRlJykgfX0gZGlzbWlzc2libGUgY2xhc3NOYW1lPVwiZmFkZSBzaG93XCI+XG4gICAgICAgICAgICAgICAgICAgIEFjaHR1bmchIElocmUgTmFjaHJpY2h0IHd1cmRlIG5pY2h0IHZlcnNjaGlja3QuXG4gICAgICAgICAgICAgICAgPC9TdHlsZWRXYXJuaW5nQWxlcnQ+XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgPC9TdHlsZWRDb250YWluZXI+XG4gICAgKTtcbn1cblxuY29uc3QgU3R5bGVkQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gICAgbWF4LXdpZHRoOiA0NTBweDsgXG4gICAgcGFkZGluZzogMHB4OyBcbmBcblxuLy8gaW5wdXQgc3R5bGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBib290c3RyYXAgPGlucHV0PiBjb21wb25lbnQuIHdpdGggdHlwZSA9IFwieFwiIHNheWluZyB3aGF0IHR5cGUgXG5jb25zdCBTdHlsZWRJbnB1dCA9IHN0eWxlZChGb3JtLkNvbnRyb2wpYFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgZm9udC1zaXplOiAxNS4ycHg7XG4gICAgY29sb3I6ICM1OTU1NTU7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMHB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIGJvcmRlcjogbm9uZTsgXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4OyBcbiAgICBwYWRkaW5nOiAycHggMTBweDsgXG4gICAgbWFyZ2luOiAyMHB4IDBweDsgXG4gXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICB9XG5cbiAgICAmOjpob3ZlciB7XG4gICAgICAgIGN1cnNlcjogcG9pbnRlcjsgXG4gICAgfVxuYFxuY29uc3QgU3R5bGVkRm9ybUNvbnRyb2xNZXNzYWdlID0gc3R5bGVkKEZvcm0uQ29udHJvbClgXG4gICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICBmb250LXNpemU6IDE1LjJweDtcbiAgICBjb2xvcjogIzU5NTU1NTtcbiAgICBsZXR0ZXItc3BhY2luZzogMS4wcHg7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JleTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7IFxuICAgIGhlaWdodDogMjAwcHg7IFxuICAgIHBhZGRpbmc6IDRweCAxMHB4OyBcbiAgICBtYXJnaW4tdG9wOiA1MHB4OyBcblxuICAgICY6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgfVxuYFxuY29uc3QgYnV0dG9uSG92ZXIgPSBrZXlmcmFtZXNgXG4gICAgZnJvbSB7dHJhbnNmb3JtOiBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7fVxuICAgIHRvIHt0cmFuc2Zvcm06IGJhY2tncm91bmQtY29sb3I6IGJsdWU7fVxuYFxuXG5jb25zdCBTdHlsZWRGb3JtQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgIGZvbnQtc2l6ZTogMTUuMnB4O1xuICAgIGxldHRlci1zcGFjaW5nOiAxLjBweDtcbiAgICB3aWR0aDogMTAwJTsgXG4gICAgaGVpZ2h0OiAzNXB4O1xuICAgIGNvbG9yOiB3aGl0ZTsgXG4gICAgYm9yZGVyLXJhZGl1czogMHB4OyBcblxuICAgICY6aG92ZXIge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNUY4MDQ2O1xuICAgIH1cbmBcbmNvbnN0IFN0eWxlZFN1Y2Nlc3NBbGVydCA9IHN0eWxlZChBbGVydClgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjNkY5MzUzOyBcbiAgICBjb2xvcjogIzZGOTM1MztcbmBcblxuY29uc3QgU3R5bGVkV2FybmluZ0FsZXJ0ID0gc3R5bGVkKEFsZXJ0KWBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNCRjRFMzA7IFxuICAgIGNvbG9yOiAjQkY0RTMwO1xuYCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/Contact.js\n");

/***/ })

})