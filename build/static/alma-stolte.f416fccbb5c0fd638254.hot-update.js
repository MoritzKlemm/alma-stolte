webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/Contact.js":
/*!**************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/Contact.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return ContactUs; });\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.regexp.constructor.js */ \"./node_modules/core-js/modules/es.regexp.constructor.js\");\n/* harmony import */ var core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-bootstrap/Container */ \"./node_modules/react-bootstrap/esm/Container.js\");\n/* harmony import */ var react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-bootstrap/Row */ \"./node_modules/react-bootstrap/esm/Row.js\");\n/* harmony import */ var react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-bootstrap/Col */ \"./node_modules/react-bootstrap/esm/Col.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! emailjs-com */ \"./node_modules/emailjs-com/source/index.js\");\n/* harmony import */ var emailjs_com__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(emailjs_com__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var _ContactAlert__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ContactAlert */ \"./packages/alma-stolte-theme/src/components/ContactAlert.js\");\n/* harmony import */ var react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! react-bootstrap/Alert */ \"./node_modules/react-bootstrap/esm/Alert.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}function ContactUs(){// variable to save if alert is shown. three options: hide, success, failure\nconst[alertStatus,setAlertStatus]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('hide');const[name,setName]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[nameCorrect,setNameCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[email,setEmail]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[emailCorrect,setEmailCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const[subject,setSubject]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('');const[subjectCorrect,setSubjectCorrect]=Object(react__WEBPACK_IMPORTED_MODULE_4__[\"useState\"])('form-control');const validateName=nameInput=>{// keep input field \"synchron\" with user input\nsetName(nameInput);// define email pattern \nconst regExName=/^[a-zA-Z\\s]+$/;// create regex object \nconst regExNameObject=new RegExp(regExName);// test regex against user input saved in \"name\"\nlet resultName=regExNameObject.test(name.toLowerCase());// first checks if string is empty because no validation needed if so. if not empty, checking results of regex.\nsetNameCorrect(nameInput==''?'':resultName?\"form-control is-valid\":\"form-control is-invalid\");// needed for final sendEmail function\nreturn resultName;};const validateMail=mailInput=>{setEmail(mailInput);const regExMail=/\\S+@\\S+\\.\\S+/;const regExMailObject=new RegExp(regExMail);let resultMail=regExMailObject.test(email.toLowerCase());setEmailCorrect(mailInput==''?'':resultMail?\"form-control is-valid\":\"form-control is-invalid\");return resultMail;};const validateSubject=subjectInput=>{setSubject(subjectInput);setSubjectCorrect(subjectInput.length<=500?\"form-control is-valid\":\"form-control is-invalid\");};function sendEmail(e){e.preventDefault();if(nameCorrect=='form-control is-valid'&&emailCorrect=='form-control is-valid'){// credentials derived from emailjs.com\nemailjs_com__WEBPACK_IMPORTED_MODULE_10___default.a.sendForm('service_cmv2a0i','template_icmanhg',e.target,'user_qyKXt1Dj8Hq0dM0sJ1q8r').then(result=>{console.log(result.text);if(result.text==\"OK\"){setAlertStatus('success');}},error=>{console.log(error.text);setAlertStatus('failure');});setTimeout(e.target.reset(),2000);}else{alert(\"Ihre Eingaben sind noch nicht korrekt!\");}}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(StyledContainer,{id:\"contact-smooth-scroll\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"],{className:\"contact-form\",onSubmit:sendEmail,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"user_name\",placeholder:\"Vor -und Nachname\",value:name,onChange:e=>{validateName(e.target.value);},className:nameCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"email\",name:\"user_email\",placeholder:\"Email\",value:email,onChange:e=>{validateMail(e.target.value);},className:emailCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledInput,{type:\"text\",name:\"subject\",placeholder:\"Betreff\",value:subject,onChange:e=>{validateSubject(e.target.value);},className:subjectCorrect})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormControlMessage,{as:\"textarea\",rows:8,name:\"message\",placeholder:\"Nachricht an Alma Stolte...\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Group,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledFormButton,{type:\"submit\",value:\"Send\",children:\"senden\"})})]}),alertStatus=='hide'?null:alertStatus=='success'?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledSuccessAlert,{variant:\"success\",onClick:()=>{setAlertStatus('hide');},dismissible:true,fade:true,show:true,children:\"Ihre Nachricht wurde verschickt!\"}):Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_13__[\"jsx\"])(StyledWarningAlert,{variant:\"warning\",onClick:()=>{setAlertStatus('hide');},dismissible:true,className:\"fade show\",children:\"Achtung! Ihre Nachricht wurde nicht verschickt.\"})]});}const StyledContainer=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{target:\"e1jwy1zu5\",label:\"StyledContainer\"})( false?undefined:{name:\"1wpx54c\",styles:\"max-width:450px;padding:0px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});// input styling --------------------------------------\n// bootstrap <input> component. with type = \"x\" saying what type \nconst StyledInput=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu4\",label:\"StyledInput\"})( false?undefined:{name:\"1pgtf25\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:none;border-bottom:1px solid grey;border-radius:0px;padding:2px 10px;margin:20px 0px;&:focus{background-color:transparent;}&::hover{curser:pointer;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledFormControlMessage=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_6__[\"Form\"].Control,{target:\"e1jwy1zu3\",label:\"StyledFormControlMessage\"})( false?undefined:{name:\"hifqds\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;text-align:justify;background-color:transparent;border:1px solid grey;border-radius:0px;height:200px;padding:4px 10px;margin-top:50px;&:focus{background-color:transparent;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const buttonHover=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"keyframes\"])(_t||(_t=_`\n    from {transform: background-color: red;}\n    to {transform: background-color: blue;}\n`));const StyledFormButton=Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(\"button\",{target:\"e1jwy1zu2\",label:\"StyledFormButton\"})( false?undefined:{name:\"1pcsr4o\",styles:\"font-family:LibreBaskerville-Regular;font-size:15.2px;color:#595555;letter-spacing:1.0px;width:100%;height:35px;background-color:#6F9353;color:white;border:none;border-radius:0px;&:hover{background-color:#5F8046;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9Db250YWN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdMc0MiLCJmaWxlIjoiL1VzZXJzL21vcml0emtsZW1tL0RvY3VtZW50cy9GaXJtYS9Qcm9qZWt0ZS9hbG1hIHN0b2x0ZS9jb2RlL2FsbWEtc3RvbHRlL3BhY2thZ2VzL2FsbWEtc3RvbHRlLXRoZW1lL3NyYy9jb21wb25lbnRzL0NvbnRhY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWFjdCwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJ1xuaW1wb3J0IENvbnRhaW5lciBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29udGFpbmVyJ1xuaW1wb3J0IFJvdyBmcm9tICdyZWFjdC1ib290c3RyYXAvUm93J1xuaW1wb3J0IENvbCBmcm9tICdyZWFjdC1ib290c3RyYXAvQ29sJ1xuaW1wb3J0IGVtYWlsanMgZnJvbSAnZW1haWxqcy1jb20nO1xuaW1wb3J0IENvbnRhY3RBbGVydCBmcm9tICcuL0NvbnRhY3RBbGVydCdcbmltcG9ydCBBbGVydCBmcm9tICdyZWFjdC1ib290c3RyYXAvQWxlcnQnXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhY3RVcygpIHtcblxuICAgIC8vIHZhcmlhYmxlIHRvIHNhdmUgaWYgYWxlcnQgaXMgc2hvd24uIHRocmVlIG9wdGlvbnM6IGhpZGUsIHN1Y2Nlc3MsIGZhaWx1cmVcbiAgICBjb25zdCBbYWxlcnRTdGF0dXMsIHNldEFsZXJ0U3RhdHVzXSA9IHVzZVN0YXRlKCdoaWRlJyk7XG5cbiAgICBjb25zdCBbbmFtZSwgc2V0TmFtZV0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbbmFtZUNvcnJlY3QsIHNldE5hbWVDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuXG4gICAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbZW1haWxDb3JyZWN0LCBzZXRFbWFpbENvcnJlY3RdID0gdXNlU3RhdGUoJ2Zvcm0tY29udHJvbCcpXG5cbiAgICBjb25zdCBbc3ViamVjdCwgc2V0U3ViamVjdF0gPSB1c2VTdGF0ZSgnJylcbiAgICBjb25zdCBbc3ViamVjdENvcnJlY3QsIHNldFN1YmplY3RDb3JyZWN0XSA9IHVzZVN0YXRlKCdmb3JtLWNvbnRyb2wnKVxuICAgIFxuICAgIFxuXG4gICAgY29uc3QgdmFsaWRhdGVOYW1lID0gKG5hbWVJbnB1dCkgPT4ge1xuXG4gICAgICAgIC8vIGtlZXAgaW5wdXQgZmllbGQgXCJzeW5jaHJvblwiIHdpdGggdXNlciBpbnB1dFxuICAgICAgICBzZXROYW1lKG5hbWVJbnB1dClcbiAgICAgICAgXG4gICAgICAgIC8vIGRlZmluZSBlbWFpbCBwYXR0ZXJuIFxuICAgICAgICBjb25zdCByZWdFeE5hbWUgPSAvXlthLXpBLVpcXHNdKyQvO1xuXG4gICAgICAgIC8vIGNyZWF0ZSByZWdleCBvYmplY3QgXG4gICAgICAgIGNvbnN0IHJlZ0V4TmFtZU9iamVjdCA9IG5ldyBSZWdFeHAocmVnRXhOYW1lKVxuXG4gICAgICAgIC8vIHRlc3QgcmVnZXggYWdhaW5zdCB1c2VyIGlucHV0IHNhdmVkIGluIFwibmFtZVwiXG4gICAgICAgIGxldCByZXN1bHROYW1lID0gcmVnRXhOYW1lT2JqZWN0LnRlc3QobmFtZS50b0xvd2VyQ2FzZSgpKVxuXG4gICAgICAgIC8vIGZpcnN0IGNoZWNrcyBpZiBzdHJpbmcgaXMgZW1wdHkgYmVjYXVzZSBubyB2YWxpZGF0aW9uIG5lZWRlZCBpZiBzby4gaWYgbm90IGVtcHR5LCBjaGVja2luZyByZXN1bHRzIG9mIHJlZ2V4LlxuICAgICAgICBzZXROYW1lQ29ycmVjdChuYW1lSW5wdXQgPT0gJycgPyAnJyA6IHJlc3VsdE5hbWUgPyBcImZvcm0tY29udHJvbCBpcy12YWxpZFwiIDogXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiKTtcblxuICAgICAgICAvLyBuZWVkZWQgZm9yIGZpbmFsIHNlbmRFbWFpbCBmdW5jdGlvblxuICAgICAgICByZXR1cm4gcmVzdWx0TmFtZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWxpZGF0ZU1haWwgPSAobWFpbElucHV0KSA9PiB7XG4gICAgICAgIHNldEVtYWlsKG1haWxJbnB1dClcblxuICAgICAgICBjb25zdCByZWdFeE1haWwgPSAvXFxTK0BcXFMrXFwuXFxTKy87XG4gICAgICAgIGNvbnN0IHJlZ0V4TWFpbE9iamVjdCA9IG5ldyBSZWdFeHAocmVnRXhNYWlsKVxuXG4gICAgICAgIGxldCByZXN1bHRNYWlsID0gcmVnRXhNYWlsT2JqZWN0LnRlc3QoZW1haWwudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgc2V0RW1haWxDb3JyZWN0KG1haWxJbnB1dCA9PSAnJyA/ICcnIDogcmVzdWx0TWFpbCA/IFwiZm9ybS1jb250cm9sIGlzLXZhbGlkXCIgOiBcImZvcm0tY29udHJvbCBpcy1pbnZhbGlkXCIpO1xuICAgICAgICByZXR1cm4gcmVzdWx0TWFpbDsgXG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGVTdWJqZWN0ID0gKHN1YmplY3RJbnB1dCkgPT4ge1xuICAgICAgICBzZXRTdWJqZWN0KHN1YmplY3RJbnB1dClcbiAgICAgICAgc2V0U3ViamVjdENvcnJlY3Qoc3ViamVjdElucHV0Lmxlbmd0aCA8PSA1MDAgPyBcImZvcm0tY29udHJvbCBpcy12YWxpZFwiIDogXCJmb3JtLWNvbnRyb2wgaXMtaW52YWxpZFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZW5kRW1haWwoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYobmFtZUNvcnJlY3QgPT0gJ2Zvcm0tY29udHJvbCBpcy12YWxpZCcgJiYgZW1haWxDb3JyZWN0ID09ICdmb3JtLWNvbnRyb2wgaXMtdmFsaWQnKSB7XG4gICAgICAgICAgICAvLyBjcmVkZW50aWFscyBkZXJpdmVkIGZyb20gZW1haWxqcy5jb21cbiAgICAgICAgICAgIGVtYWlsanMuc2VuZEZvcm0oJ3NlcnZpY2VfY212MmEwaScsICd0ZW1wbGF0ZV9pY21hbmhnJywgZS50YXJnZXQsICd1c2VyX3F5S1h0MURqOEhxMGRNMHNKMXE4cicpXG4gICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC50ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudGV4dCA9PSBcIk9LXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBbGVydFN0YXR1cygnc3VjY2VzcycpXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IudGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRBbGVydFN0YXR1cygnZmFpbHVyZScpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgc2V0VGltZW91dChlLnRhcmdldC5yZXNldCgpLCAyMDAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiSWhyZSBFaW5nYWJlbiBzaW5kIG5vY2ggbmljaHQga29ycmVrdCFcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxTdHlsZWRDb250YWluZXIgaWQ9XCJjb250YWN0LXNtb290aC1zY3JvbGxcIj5cbiAgICAgICAgICAgIDxGb3JtIGNsYXNzTmFtZT1cImNvbnRhY3QtZm9ybVwiIG9uU3VibWl0PXtzZW5kRW1haWx9PlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkSW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlcl9uYW1lXCIgcGxhY2Vob2xkZXI9XCJWb3IgLXVuZCBOYWNobmFtZVwiIHZhbHVlPXtuYW1lfSBvbkNoYW5nZT17KGUpID0+IHt2YWxpZGF0ZU5hbWUoZS50YXJnZXQudmFsdWUpfX0gY2xhc3NOYW1lPXtuYW1lQ29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZElucHV0IHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJ1c2VyX2VtYWlsXCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHZhbHVlPXtlbWFpbH0gb25DaGFuZ2U9eyhlKSA9PiB7dmFsaWRhdGVNYWlsKGUudGFyZ2V0LnZhbHVlKX19IGNsYXNzTmFtZT17ZW1haWxDb3JyZWN0fS8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkSW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwic3ViamVjdFwiIHBsYWNlaG9sZGVyPVwiQmV0cmVmZlwiIHZhbHVlPXtzdWJqZWN0fSBvbkNoYW5nZT17KGUpID0+IHt2YWxpZGF0ZVN1YmplY3QoZS50YXJnZXQudmFsdWUpfX0gY2xhc3NOYW1lPXtzdWJqZWN0Q29ycmVjdH0vPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICA8Rm9ybS5Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgPFN0eWxlZEZvcm1Db250cm9sTWVzc2FnZSBhcz1cInRleHRhcmVhXCIgcm93cz17OH0gbmFtZT1cIm1lc3NhZ2VcIiBwbGFjZWhvbGRlcj1cIk5hY2hyaWNodCBhbiBBbG1hIFN0b2x0ZS4uLlwiIC8+XG4gICAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwPlxuICAgICAgICAgICAgICAgICAgICA8U3R5bGVkRm9ybUJ1dHRvbiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTZW5kXCI+c2VuZGVuPC9TdHlsZWRGb3JtQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cbiAgICAgICAgICAgIDwvRm9ybT5cblxuICAgICAgICAgICAgey8qKiByZW5kZXJpbmcgYWxlcnQgYWNjb3JkaW5nIHRvIFwiYWxlcnRTdGF0dXNcIiAqL31cbiAgICAgICAgICAgIHthbGVydFN0YXR1cyA9PSAnaGlkZScgPyBudWxsIDogXG4gICAgICAgICAgICAgICAgYWxlcnRTdGF0dXMgPT0gJ3N1Y2Nlc3MnID8gXG4gICAgICAgICAgICAgICAgPFN0eWxlZFN1Y2Nlc3NBbGVydCB2YXJpYW50PVwic3VjY2Vzc1wiIG9uQ2xpY2s9eygpID0+IHsgc2V0QWxlcnRTdGF0dXMoJ2hpZGUnKSB9fSBkaXNtaXNzaWJsZSBmYWRlIHNob3c+XG4gICAgICAgICAgICAgICAgICAgIElocmUgTmFjaHJpY2h0IHd1cmRlIHZlcnNjaGlja3QhXG4gICAgICAgICAgICAgICAgPC9TdHlsZWRTdWNjZXNzQWxlcnQ+XG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIDxTdHlsZWRXYXJuaW5nQWxlcnQgdmFyaWFudD1cIndhcm5pbmdcIiBvbkNsaWNrPXsoKSA9PiB7IHNldEFsZXJ0U3RhdHVzKCdoaWRlJykgfX0gZGlzbWlzc2libGUgY2xhc3NOYW1lPVwiZmFkZSBzaG93XCI+XG4gICAgICAgICAgICAgICAgICAgIEFjaHR1bmchIElocmUgTmFjaHJpY2h0IHd1cmRlIG5pY2h0IHZlcnNjaGlja3QuXG4gICAgICAgICAgICAgICAgPC9TdHlsZWRXYXJuaW5nQWxlcnQ+XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgPC9TdHlsZWRDb250YWluZXI+XG4gICAgKTtcbn1cblxuY29uc3QgU3R5bGVkQ29udGFpbmVyID0gc3R5bGVkKENvbnRhaW5lcilgXG4gICAgbWF4LXdpZHRoOiA0NTBweDsgXG4gICAgcGFkZGluZzogMHB4OyBcbmBcblxuLy8gaW5wdXQgc3R5bGluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vLyBib290c3RyYXAgPGlucHV0PiBjb21wb25lbnQuIHdpdGggdHlwZSA9IFwieFwiIHNheWluZyB3aGF0IHR5cGUgXG5jb25zdCBTdHlsZWRJbnB1dCA9IHN0eWxlZChGb3JtLkNvbnRyb2wpYFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgZm9udC1zaXplOiAxNS4ycHg7XG4gICAgY29sb3I6ICM1OTU1NTU7XG4gICAgbGV0dGVyLXNwYWNpbmc6IDEuMHB4O1xuICAgIHRleHQtYWxpZ246IGp1c3RpZnk7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IFxuICAgIGJvcmRlcjogbm9uZTsgXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7XG4gICAgYm9yZGVyLXJhZGl1czogMHB4OyBcbiAgICBwYWRkaW5nOiAycHggMTBweDsgXG4gICAgbWFyZ2luOiAyMHB4IDBweDsgXG4gXG4gICAgJjpmb2N1cyB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyBcbiAgICB9XG5cbiAgICAmOjpob3ZlciB7XG4gICAgICAgIGN1cnNlcjogcG9pbnRlcjsgXG4gICAgfVxuYFxuY29uc3QgU3R5bGVkRm9ybUNvbnRyb2xNZXNzYWdlID0gc3R5bGVkKEZvcm0uQ29udHJvbClgXG4gICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICBmb250LXNpemU6IDE1LjJweDtcbiAgICBjb2xvcjogIzU5NTU1NTtcbiAgICBsZXR0ZXItc3BhY2luZzogMS4wcHg7XG4gICAgdGV4dC1hbGlnbjoganVzdGlmeTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JleTtcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7IFxuICAgIGhlaWdodDogMjAwcHg7IFxuICAgIHBhZGRpbmc6IDRweCAxMHB4OyBcbiAgICBtYXJnaW4tdG9wOiA1MHB4OyBcblxuICAgICY6Zm9jdXMge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgXG4gICAgfVxuYFxuY29uc3QgYnV0dG9uSG92ZXIgPSBrZXlmcmFtZXNgXG4gICAgZnJvbSB7dHJhbnNmb3JtOiBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7fVxuICAgIHRvIHt0cmFuc2Zvcm06IGJhY2tncm91bmQtY29sb3I6IGJsdWU7fVxuYFxuXG5jb25zdCBTdHlsZWRGb3JtQnV0dG9uID0gc3R5bGVkLmJ1dHRvbmBcbiAgICBmb250LWZhbWlseTogTGlicmVCYXNrZXJ2aWxsZS1SZWd1bGFyO1xuICAgIGZvbnQtc2l6ZTogMTUuMnB4O1xuICAgIGNvbG9yOiAjNTk1NTU1O1xuICAgIGxldHRlci1zcGFjaW5nOiAxLjBweDtcbiAgICB3aWR0aDogMTAwJTsgXG4gICAgaGVpZ2h0OiAzNXB4OyBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjNkY5MzUzO1xuICAgIGNvbG9yOiB3aGl0ZTsgXG4gICAgYm9yZGVyOiBub25lOyBcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7IFxuXG4gICAgJjpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICM1RjgwNDY7XG4gICAgfVxuYFxuY29uc3QgU3R5bGVkU3VjY2Vzc0FsZXJ0ID0gc3R5bGVkKEFsZXJ0KWBcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICM2RjkzNTM7IFxuICAgIGNvbG9yOiAjNkY5MzUzO1xuYFxuXG5jb25zdCBTdHlsZWRXYXJuaW5nQWxlcnQgPSBzdHlsZWQoQWxlcnQpYFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI0JGNEUzMDsgXG4gICAgY29sb3I6ICNCRjRFMzA7XG5gIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledSuccessAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu1\",label:\"StyledSuccessAlert\"})( false?undefined:{name:\"19jywi1\",styles:\"background-color:transparent!important;border:1px solid #6F9353;color:#6F9353\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledWarningAlert=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_5__[\"styled\"])(react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_12__[\"default\"],{target:\"e1jwy1zu0\",label:\"StyledWarningAlert\"})( false?undefined:{name:\"zdnu7z\",styles:\"background-color:transparent!important;border:1px solid #BF4E30;color:#BF4E30\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/Contact.js\n");

/***/ })

})