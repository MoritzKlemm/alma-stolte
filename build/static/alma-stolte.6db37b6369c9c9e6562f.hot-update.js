webpackHotUpdate("alma-stolte",{

/***/ "./packages/alma-stolte-theme/src/components/NavbarCustom.js":
/*!*******************************************************************!*\
  !*** ./packages/alma-stolte-theme/src/components/NavbarCustom.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_bootstrap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-bootstrap */ \"./node_modules/react-bootstrap/esm/index.js\");\n/* harmony import */ var _assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../assets/images/almaBackground.jpg */ \"./packages/alma-stolte-theme/src/assets/images/almaBackground.jpg\");\n/* harmony import */ var _NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./NavbarCustomLink */ \"./packages/alma-stolte-theme/src/components/NavbarCustomLink.js\");\n/* harmony import */ var react_feather__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-feather */ \"./node_modules/react-feather/dist/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nlet _=t=>t,_t,_t2;function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}var _ref= false?undefined:{name:\"gj67yd-NavbarCustom\",styles:\"display:none;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref2= false?undefined:{name:\"3t3dk0-NavbarCustom\",styles:\"margin-bottom:80px;label:NavbarCustom;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref3= false?undefined:{name:\"qpxod8-dynamicLinkStyle\",styles:\"color:#333232!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};var _ref4= false?undefined:{name:\"ru1cpx-dynamicLinkStyle\",styles:\"color:#EDE4E5!important;label:dynamicLinkStyle;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const NavbarCustom=({state})=>{// used to determine if the navbar needs to be styled light / dark\nconst data=state.source.get(state.router.link);// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;const breakPointXS=425;// variable which changes color of toggler menu on click\nconst[toggleBGColor,setToggleBGColor]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])('rgba(0,0,0,0.5)');const onClickToggleBGColor=()=>{toggleBGColor=='rgba(0,0,0,0.5)'?setToggleBGColor('rgba(0,0,0,0.9)'):setToggleBGColor('rgba(0,0,0,0.5)');};const dynamicLinkStyle=()=>{return data.isHome?_ref4:_ref3;};const dynamicVariant=()=>{console.log(\"test\");return data.isHome?'dark':'light';};const dynamicLogoStyle=()=>{return data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#EDE4E5;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;}@media (max-width: \",breakPointSM,\"px){font-size:20px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"color:#333232;font-family:LibreBaskerville-Regular;font-size:30px;letter-spacing:10.86px;white-space:nowrap;margin:0px;@media (max-width: \",breakPointLG,\"px){font-size:26px;}@media (max-width: \",breakPointSM,\"px){font-size:20px;}\"+( false?undefined:\";label:dynamicLogoStyle;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"background-image:url(\",_assets_images_almaBackground_jpg__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\");background-size:cover;background-attachment:fixed;background-position:top;height:100vh;\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):_ref2,children:[dynamicVariant,Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"],{variant:dynamicVariant,expand:\"xl\",fixed:\"top\",css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:\",toggleBGColor,\";@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"):/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:15px 50px;background-color:rgba(235,221,209,0.8);@media (max-width: \",breakPointSM,\"px){padding:15px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNEZtQiIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBuYXZiYXIgbmVlZHMgdG8gYmUgc3R5bGVkIGxpZ2h0IC8gZGFya1xuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcblxuICAgIC8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbiAgICBjb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRMRyA9IDk5MjtcbiAgICBjb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG4gICAgY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRYUyA9IDQyNTtcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMaW5rU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtgIDogY3NzYGNvbG9yOiAjMzMzMjMyICFpbXBvcnRhbnQ7YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljVmFyaWFudCA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0XCIpXG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyAnZGFyaycgOiAnbGlnaHQnKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMb2dvU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgP1xuICAgICAgICAgICAgY3NzYGNvbG9yOiAjRURFNEU1O1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxMC44NnB4O1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgY29sb3I6ICMzMzMyMzI7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDEwLjg2cHg7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICB9YClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG4gICAgICAgICAgICB7ZHluYW1pY1ZhcmlhbnR9XG4gICAgICAgICAgICA8TmF2YmFyIHZhcmlhbnQ9e2R5bmFtaWNWYXJpYW50fSBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7LyogbG9nbyBBbG1hIFN0b2x0ZSAqL31cbiAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIvXCJ9IGNzcz17ZHluYW1pY0xvZ29TdHlsZX0+QUxNQSBTVE9MVEVcbiAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qIGhhbWJ1cmdlciBidXR0b24gKi99XG4gICAgICAgICAgICAgICAgPE5hdmJhci5Ub2dnbGUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgLz5cblxuICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIHVuY29sbGFwc2VkICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cblxuICAgICAgICAgICAgICAgICAgICB7LyogdG9nZ2xlIG1lbnUgd2hlbiBjb2xsYXBzZWQgKi99XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5LQUxFTkRFUjwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL3Byb2pla3RlL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PlBST0pFS1RFPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvdml0YS9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5WSVRBPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvbWVkaWEvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+TUVESUE8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rb250YWt0L1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PktPTlRBS1Q8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkVG9nZ2xlQXJlYT5cbiAgICAgICAgICAgICAgICA8L05hdmJhci5Db2xsYXBzZT5cblxuICAgICAgICAgICAgPC9OYXZiYXI+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEyMHB4IDUwcHg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggNTBweDsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggMTVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5IaXN0b3Jpc2NoZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFN1YkhlYWRpbmc+TW9kZXJuZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoTmF2YmFyQ3VzdG9tKVxuXG4vLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG5jb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuY29uc3QgYnJlYWtQb2ludExHID0gOTkyO1xuY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWROYXZMaW5rID0gc3R5bGVkKE5hdi5MaW5rKWBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41NnB4O1xuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMTIlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMHB4OyBcblxuICAgIC8vIHN0eWxpbmcgbGluayB0ZXh0IG9uIGhvdmVyXG4gICAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgY29sb3I6IHJnYigxNzUsMTc1LDE3NSkgIWltcG9ydGFudDtcbiAgICB9IFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xuICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDglICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHggIWltcG9ydGFudDsgXG4gICAgfVxuYFxuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\"),children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(\"div\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(_NavbarCustomLink__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{link:\"/\",css:dynamicLogoStyle,children:\"ALMA STOLTE\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Toggle,{\"aria-controls\":\"toggle-connection\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Navbar\"].Collapse,{id:\"toggle-connection\",className:\"justify-content-end\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(StyledToggleArea,{className:\"mr-auto\",className:\"justify-content-end\",children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kalender/\",css:dynamicLinkStyle,children:\"KALENDER\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/projekte/\",css:dynamicLinkStyle,children:\"PROJEKTE\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/vita/\",css:dynamicLinkStyle,children:\"VITA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/media/\",css:dynamicLinkStyle,children:\"MEDIA\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledNavLink,{href:\"/kontakt/\",css:dynamicLinkStyle,children:\"KONTAKT\"})]})})]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsxs\"])(\"div\",{css:data.isHome?/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"css\"])(\"padding:120px 50px;@media (max-width: \",breakPointMD,\"px){padding:80px 50px;}@media (max-width: \",breakPointSM,\"px){padding:80px 15px;}\"+( false?undefined:\";label:NavbarCustom;\"), false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkhtQiIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBuYXZiYXIgbmVlZHMgdG8gYmUgc3R5bGVkIGxpZ2h0IC8gZGFya1xuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcblxuICAgIC8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbiAgICBjb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRMRyA9IDk5MjtcbiAgICBjb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG4gICAgY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRYUyA9IDQyNTtcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMaW5rU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtgIDogY3NzYGNvbG9yOiAjMzMzMjMyICFpbXBvcnRhbnQ7YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljVmFyaWFudCA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0XCIpXG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyAnZGFyaycgOiAnbGlnaHQnKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMb2dvU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgP1xuICAgICAgICAgICAgY3NzYGNvbG9yOiAjRURFNEU1O1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxMC44NnB4O1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgY29sb3I6ICMzMzMyMzI7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDEwLjg2cHg7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICB9YClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG4gICAgICAgICAgICB7ZHluYW1pY1ZhcmlhbnR9XG4gICAgICAgICAgICA8TmF2YmFyIHZhcmlhbnQ9e2R5bmFtaWNWYXJpYW50fSBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7LyogbG9nbyBBbG1hIFN0b2x0ZSAqL31cbiAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIvXCJ9IGNzcz17ZHluYW1pY0xvZ29TdHlsZX0+QUxNQSBTVE9MVEVcbiAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qIGhhbWJ1cmdlciBidXR0b24gKi99XG4gICAgICAgICAgICAgICAgPE5hdmJhci5Ub2dnbGUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgLz5cblxuICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIHVuY29sbGFwc2VkICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cblxuICAgICAgICAgICAgICAgICAgICB7LyogdG9nZ2xlIG1lbnUgd2hlbiBjb2xsYXBzZWQgKi99XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5LQUxFTkRFUjwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL3Byb2pla3RlL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PlBST0pFS1RFPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvdml0YS9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5WSVRBPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvbWVkaWEvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+TUVESUE8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rb250YWt0L1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PktPTlRBS1Q8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkVG9nZ2xlQXJlYT5cbiAgICAgICAgICAgICAgICA8L05hdmJhci5Db2xsYXBzZT5cblxuICAgICAgICAgICAgPC9OYXZiYXI+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEyMHB4IDUwcHg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggNTBweDsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggMTVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5IaXN0b3Jpc2NoZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFN1YkhlYWRpbmc+TW9kZXJuZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoTmF2YmFyQ3VzdG9tKVxuXG4vLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG5jb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuY29uc3QgYnJlYWtQb2ludExHID0gOTkyO1xuY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWROYXZMaW5rID0gc3R5bGVkKE5hdi5MaW5rKWBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41NnB4O1xuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMTIlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMHB4OyBcblxuICAgIC8vIHN0eWxpbmcgbGluayB0ZXh0IG9uIGhvdmVyXG4gICAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgY29sb3I6IHJnYigxNzUsMTc1LDE3NSkgIWltcG9ydGFudDtcbiAgICB9IFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xuICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDglICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHggIWltcG9ydGFudDsgXG4gICAgfVxuYFxuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\"):_ref,children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Historisches Violoncello\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__[\"jsx\"])(StyledSubHeading,{children:\"Modernes Violoncello\"})]})]});};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(NavbarCustom));// like bootstrap breakpoints md, lg, xl\nconst breakPointXL=1199;const breakPointLG=992;const breakPointMD=768;const breakPointSM=576;// -----------------------------------------\nconst appear=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t||(_t=_`\nfrom {\n    color: rgba(219, 204, 205, 0.0);\n  }\n  to {\n    color: rgba(219, 204, 205, 0.9);\n  }\n`));// -----------------------------------------\nconst moveup=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"keyframes\"])(_t2||(_t2=_`\nfrom {\n    transform: translateY(50px);\n  } \n  to {\n    transform: translateY(0px);\n  }\n`));const StyledToggleArea=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"],{target:\"en8g08n3\",label:\"StyledToggleArea\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb3JpdHprbGVtbS9Eb2N1bWVudHMvRmlybWEvUHJvamVrdGUvYWxtYSBzdG9sdGUvY29kZS9hbG1hLXN0b2x0ZS9wYWNrYWdlcy9hbG1hLXN0b2x0ZS10aGVtZS9zcmMvY29tcG9uZW50cy9OYXZiYXJDdXN0b20uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUxvQyIsImZpbGUiOiIvVXNlcnMvbW9yaXR6a2xlbW0vRG9jdW1lbnRzL0Zpcm1hL1Byb2pla3RlL2FsbWEgc3RvbHRlL2NvZGUvYWxtYS1zdG9sdGUvcGFja2FnZXMvYWxtYS1zdG9sdGUtdGhlbWUvc3JjL2NvbXBvbmVudHMvTmF2YmFyQ3VzdG9tLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQsIGNzcywga2V5ZnJhbWVzIH0gZnJvbSAnZnJvbnRpdHknO1xuaW1wb3J0IHsgTmF2YmFyLCBOYXYgfSBmcm9tICdyZWFjdC1ib290c3RyYXAnO1xuaW1wb3J0IGFsbWFCYWNrZ3JvdW5kIGZyb20gJy4uL2Fzc2V0cy9pbWFnZXMvYWxtYUJhY2tncm91bmQuanBnJ1xuaW1wb3J0IE5hdmJhckN1c3RvbUxpbmsgZnJvbSBcIi4vTmF2YmFyQ3VzdG9tTGlua1wiO1xuaW1wb3J0IHsgU2hhcmUsIERvd25sb2FkLCBNZW51IH0gZnJvbSAncmVhY3QtZmVhdGhlcic7XG5cblxuXG5cbmNvbnN0IE5hdmJhckN1c3RvbSA9ICh7IHN0YXRlIH0pID0+IHtcblxuICAgIC8vIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBuYXZiYXIgbmVlZHMgdG8gYmUgc3R5bGVkIGxpZ2h0IC8gZGFya1xuICAgIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcblxuICAgIC8vIGxpa2UgYm9vdHN0cmFwIGJyZWFrcG9pbnRzIG1kLCBsZywgeGxcbiAgICBjb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRMRyA9IDk5MjtcbiAgICBjb25zdCBicmVha1BvaW50TUQgPSA3Njg7XG4gICAgY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuICAgIGNvbnN0IGJyZWFrUG9pbnRYUyA9IDQyNTtcblxuICAgIC8vIHZhcmlhYmxlIHdoaWNoIGNoYW5nZXMgY29sb3Igb2YgdG9nZ2xlciBtZW51IG9uIGNsaWNrXG4gICAgY29uc3QgW3RvZ2dsZUJHQ29sb3IsIHNldFRvZ2dsZUJHQ29sb3JdID0gdXNlU3RhdGUoJ3JnYmEoMCwwLDAsMC41KScpXG5cbiAgICBjb25zdCBvbkNsaWNrVG9nZ2xlQkdDb2xvciA9ICgpID0+IHtcbiAgICAgICAgKHRvZ2dsZUJHQ29sb3IgPT0gJ3JnYmEoMCwwLDAsMC41KScgPyBzZXRUb2dnbGVCR0NvbG9yKCdyZ2JhKDAsMCwwLDAuOSknKSA6IHNldFRvZ2dsZUJHQ29sb3IoJ3JnYmEoMCwwLDAsMC41KScpKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMaW5rU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyBjc3NgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtgIDogY3NzYGNvbG9yOiAjMzMzMjMyICFpbXBvcnRhbnQ7YClcbiAgICB9XG5cbiAgICBjb25zdCBkeW5hbWljVmFyaWFudCA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ0ZXN0XCIpXG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgPyAnZGFyaycgOiAnbGlnaHQnKVxuICAgIH1cblxuICAgIGNvbnN0IGR5bmFtaWNMb2dvU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YS5pc0hvbWUgP1xuICAgICAgICAgICAgY3NzYGNvbG9yOiAjRURFNEU1O1xuICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLVJlZ3VsYXI7XG4gICAgICAgICAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgICAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxMC44NnB4O1xuICAgICAgICAgICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwcHg7XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7IFxuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgY29sb3I6ICMzMzMyMzI7XG4gICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6IExpYnJlQmFza2VydmlsbGUtUmVndWxhcjtcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDMwcHg7XG4gICAgICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDEwLjg2cHg7XG4gICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDBweDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TEd9cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyNnB4OyBcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9udC1zaXplOiAyMHB4OyBcbiAgICAgICAgICAgICAgICB9YClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuXG4gICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICBjc3NgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke2FsbWFCYWNrZ3JvdW5kfSk7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDsgXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IHRvcDtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDB2aDtgXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICBjc3NgICAgIG1hcmdpbi1ib3R0b206IDgwcHg7YH0+XG4gICAgICAgICAgICB7ZHluYW1pY1ZhcmlhbnR9XG4gICAgICAgICAgICA8TmF2YmFyIHZhcmlhbnQ9e2R5bmFtaWNWYXJpYW50fSBleHBhbmQ9XCJ4bFwiIGZpeGVkPVwidG9wXCIgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHt0b2dnbGVCR0NvbG9yfTtcblxuICAgICAgICAgICAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50U019cHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDE1cHggMTVweDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgY3NzYHBhZGRpbmc6IDE1cHggNTBweDtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyMzUsMjIxLDIwOSwwLjgpO1xuXG4gICAgICAgICAgICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRTTX1weCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMTVweCAxNXB4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYH0+XG5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICB7LyogbG9nbyBBbG1hIFN0b2x0ZSAqL31cbiAgICAgICAgICAgICAgICAgICAgPE5hdmJhckN1c3RvbUxpbmsgbGluaz17XCIvXCJ9IGNzcz17ZHluYW1pY0xvZ29TdHlsZX0+QUxNQSBTVE9MVEVcbiAgICAgICAgICAgICAgICAgICAgPC9OYXZiYXJDdXN0b21MaW5rPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgey8qIGhhbWJ1cmdlciBidXR0b24gKi99XG4gICAgICAgICAgICAgICAgPE5hdmJhci5Ub2dnbGUgYXJpYS1jb250cm9scz1cInRvZ2dsZS1jb25uZWN0aW9uXCIgLz5cblxuICAgICAgICAgICAgICAgIHsvKiB0b2dnbGUgbWVudSB3aGVuIHVuY29sbGFwc2VkICovfVxuICAgICAgICAgICAgICAgIDxOYXZiYXIuQ29sbGFwc2UgaWQ9XCJ0b2dnbGUtY29ubmVjdGlvblwiIGNsYXNzTmFtZT1cImp1c3RpZnktY29udGVudC1lbmRcIj5cblxuICAgICAgICAgICAgICAgICAgICB7LyogdG9nZ2xlIG1lbnUgd2hlbiBjb2xsYXBzZWQgKi99XG4gICAgICAgICAgICAgICAgICAgIDxTdHlsZWRUb2dnbGVBcmVhIGNsYXNzTmFtZT1cIm1yLWF1dG9cIiBjbGFzc05hbWU9XCJqdXN0aWZ5LWNvbnRlbnQtZW5kXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rYWxlbmRlci9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5LQUxFTkRFUjwvU3R5bGVkTmF2TGluaz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdHlsZWROYXZMaW5rIGhyZWY9e1wiL3Byb2pla3RlL1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PlBST0pFS1RFPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvdml0YS9cIn0gY3NzPXtkeW5hbWljTGlua1N0eWxlfT5WSVRBPC9TdHlsZWROYXZMaW5rPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0eWxlZE5hdkxpbmsgaHJlZj17XCIvbWVkaWEvXCJ9IGNzcz17ZHluYW1pY0xpbmtTdHlsZX0+TUVESUE8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3R5bGVkTmF2TGluayBocmVmPXtcIi9rb250YWt0L1wifSBjc3M9e2R5bmFtaWNMaW5rU3R5bGV9PktPTlRBS1Q8L1N0eWxlZE5hdkxpbms+XG4gICAgICAgICAgICAgICAgICAgIDwvU3R5bGVkVG9nZ2xlQXJlYT5cbiAgICAgICAgICAgICAgICA8L05hdmJhci5Db2xsYXBzZT5cblxuICAgICAgICAgICAgPC9OYXZiYXI+XG5cbiAgICAgICAgICAgIDxkaXYgY3NzPXtkYXRhLmlzSG9tZSA/XG4gICAgICAgICAgICAgICAgY3NzYFxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDEyMHB4IDUwcHg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggNTBweDsgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFNNfXB4KSB7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDgwcHggMTVweDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgICAgICBgfT5cbiAgICAgICAgICAgICAgICA8U3R5bGVkU3ViSGVhZGluZz5IaXN0b3Jpc2NoZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICAgICAgPFN0eWxlZFN1YkhlYWRpbmc+TW9kZXJuZXMgVmlvbG9uY2VsbG88L1N0eWxlZFN1YkhlYWRpbmc+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoTmF2YmFyQ3VzdG9tKVxuXG4vLyBsaWtlIGJvb3RzdHJhcCBicmVha3BvaW50cyBtZCwgbGcsIHhsXG5jb25zdCBicmVha1BvaW50WEwgPSAxMTk5O1xuY29uc3QgYnJlYWtQb2ludExHID0gOTkyO1xuY29uc3QgYnJlYWtQb2ludE1EID0gNzY4O1xuY29uc3QgYnJlYWtQb2ludFNNID0gNTc2O1xuXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IGFwcGVhciA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuMCk7XG4gIH1cbiAgdG8ge1xuICAgIGNvbG9yOiByZ2JhKDIxOSwgMjA0LCAyMDUsIDAuOSk7XG4gIH1cbmA7XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmNvbnN0IG1vdmV1cCA9IGtleWZyYW1lc2BcbmZyb20ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfSBcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwcHgpO1xuICB9XG5gO1xuXG5cblxuY29uc3QgU3R5bGVkVG9nZ2xlQXJlYSA9IHN0eWxlZChOYXYpYFxuXG5gXG5jb25zdCBTdHlsZWRNYXJnaW4gPSBzdHlsZWQuZGl2YFxuICAgIG1hcmdpbjogMHB4IDYlO1xuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAke2JyZWFrUG9pbnRYTH1weCkge1xuICAgICAgICBtYXJnaW46IDEwcHggMHB4OyBcbiAgICB9XG5gO1xuXG5jb25zdCBTdHlsZWROYXZMaW5rID0gc3R5bGVkKE5hdi5MaW5rKWBcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgY29sb3I6ICNFREU0RTUgIWltcG9ydGFudDtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41NnB4O1xuICAgIG1hcmdpbjogMHB4IDBweCAwcHggMTIlICFpbXBvcnRhbnQ7XG4gICAgcGFkZGluZzogMHB4OyBcblxuICAgIC8vIHN0eWxpbmcgbGluayB0ZXh0IG9uIGhvdmVyXG4gICAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAgIFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgY29sb3I6IHJnYigxNzUsMTc1LDE3NSkgIWltcG9ydGFudDtcbiAgICB9IFxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDE1MDBweCkge1xuICAgICAgICBtYXJnaW46IDBweCAwcHggMHB4IDglICFpbXBvcnRhbnQ7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludFhMfXB4KSB7XG4gICAgICAgIG1hcmdpbjogMTBweCAwcHggIWltcG9ydGFudDsgXG4gICAgfVxuYFxuXG5jb25zdCBTdHlsZWRTdWJIZWFkaW5nID0gc3R5bGVkLmg0YFxuICAgIGZvbnQtZmFtaWx5OiBMaWJyZUJhc2tlcnZpbGxlLUl0YWxpYztcbiAgICBmb250LXNpemU6IDIwcHg7XG4gICAgY29sb3I6IHJnYmEoMjE5LCAyMDQsIDIwNSwgMC45KTtcbiAgICBsZXR0ZXItc3BhY2luZzogMy41M3B4O1xuICAgIGxpbmUtaGVpZ2h0OiAzMHB4O1xuICAgIGFuaW1hdGlvbjogJHthcHBlYXJ9IDEuOHMgZWFzZS1pbi1vdXQ7XG5cbiAgICBAbWVkaWEgKG1heC13aWR0aDogJHticmVha1BvaW50TUR9cHgpIHtcbiAgICAgICAgZm9udC1zaXplOiAxOHB4OyBcbiAgICAgICAgbGluZS1oZWlnaHQ6IDI1cHg7XG4gICAgfVxuXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6ICR7YnJlYWtQb2ludE1EfXB4KSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTZweDsgXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICAgIH1cblxuYFxuXG4iXX0= */\");const StyledMargin=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\",{target:\"en8g08n2\",label:\"StyledMargin\"})(\"margin:0px 6%;@media (max-width: \",breakPointXL,\"px){margin:10px 0px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledNavLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_bootstrap__WEBPACK_IMPORTED_MODULE_4__[\"Nav\"].Link,{target:\"en8g08n1\",label:\"StyledNavLink\"})(\"font-size:16px;color:#EDE4E5!important;letter-spacing:3.56px;margin:0px 0px 0px 12%!important;padding:0px;&:hover{text-decoration:none;cursor:pointer;color:rgb(175,175,175)!important;}@media (max-width: 1500px){margin:0px 0px 0px 8%!important;}@media (max-width: \",breakPointXL,\"px){margin:10px 0px!important;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const StyledSubHeading=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"h4\",{target:\"en8g08n0\",label:\"StyledSubHeading\"})(\"font-family:LibreBaskerville-Italic;font-size:20px;color:rgba(219, 204, 205, 0.9);letter-spacing:3.53px;line-height:30px;animation:\",appear,\" 1.8s ease-in-out;@media (max-width: \",breakPointMD,\"px){font-size:18px;line-height:25px;}@media (max-width: \",breakPointMD,\"px){font-size:16px;line-height:20px;}\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/alma-stolte-theme/src/components/NavbarCustom.js\n");

/***/ })

})